package c_ast_ascendente;


import java_cup.runtime.*;
import semops.SemOps;
import asint.TinyASint.Exp;
import asint.TinyASint.Exps;
import asint.TinyASint.Declaracion;
import asint.TinyASint.Declaraciones;
import asint.TinyASint.Instruccion;
import asint.TinyASint.Instrucciones;
import asint.TinyASint.Camps;
import asint.TinyASint.Camp;
import asint.TinyASint.Tipo;
import asint.TinyASint.Bloque;
import asint.TinyASint.ParamForms;
import asint.TinyASint.ParamForm;
import asint.TinyASint.Programa;
import asint.TinyASint.StringLocalizado;


scan with {: return getScanner().next_token(); :};
action code {:
   private SemOps sem = new SemOps();
:};
parser code {: 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);
:};





terminal 	 MAS, MENOS, DIV, POR, PERCENT, AND, NOT, OR, MENOR, 
			 MAYOR, MENOR_IGUAL, MAYOR_IGUAL, IGUAL, DIF, PAP, PCIERRE, CAP, 
			 CCIERRE, PUNTO, FLECHA, DAMP, PCOMA, VAR, ID, TYPE, 
			 PROC, COMA, AMP, TRUE, FALSE, LIT_ENT, LIT_REAL, LIT_CAD,
			 NULL, ARRAY, OF, RECORD, LLAP, LLCIERRE, POINTER,
			 INT, BOOL, REAL, STRING, IF, THEN, ELSE, WHILE, ENDIF, DO,
			 ENDWHILE, READ, NL, DELETE, NEW, WRITE, CALL, DIGUAL;
			 
terminal StringLocalizado NUM, ID;





non terminal  Programa PROGRAMA;

non terminal  Declaraciones DECLARACIONES;
non terminal  Declaracion DECLARACION, DECVAR, DECTIPO, DECPROC;

non terminal  Instrucciones INSTRUCCIONES, LISTA_INST, LISTA_INST_OP;
non terminal  Instruccion INSTRUCCION;

non terminal  Tipo TIPO, TIPO_BASICO;

non terminal  ParamForms PFORMALES, LISTA_PFORMALES;
non terminal  ParamForm PFORMAL;

non terminal  Camps LISTA_CAMPOS;
non terminal  Camp CAMPO;

non terminal Bloque BLOQUE;

non terminal  Exps LISTA_EXPR_OP, LISTA_EXPR;
non terminal  Exp E0, E1, E2, E3, E4, E5, E6, E7, OPUN5, EXPRESION_BASICA,
			  EXPRESION, OP_ACCESO;
			  
non terminal  String OPBN1, OPBN2, OPBN3;







PROGRAMA ::= DECLARACIONES: decs DAMP INSTRUCCIONES: ins
    {: RESULT = sem.P_decs(decs,ins);:};
PROGRAMA ::= INSTRUCCIONES: ins
    {: RESULT = sem.P_nodecs(ins):};
    

DECLARACIONES ::= DECLARACION: dec PCOMA DECLARACIONES: decs
    {: RESULT = sem.decsmuchas(dec, decs):};
DECLARACIONES ::= DECLARACION: dec
    {: RESULT = sem.decsuna(dec):};
    

DECLARACION ::= DECVAR: dec
    {: RESULT = dec;:};
DECLARACION ::= DECTIPO: dec
    {: RESULT = dec;:};
DECLARACION ::= DECPROC: dec
    {: RESULT = dec;:};

DECVAR ::= VAR: v TIPO: tipo ID: iden
    {: RESULT = sem.tipo(sem.str(iden.image,iden.beginLine,iden.beginColumn), tipo, sem.str(v.image,v.beginLine,v.beginColumn));:};
DECTIPO ::=  TYPE: t TIPO: tipo ID: iden
    {: RESULT = sem.tipo(sem.str(iden.image,iden.beginLine,iden.beginColumn), tipo, sem.str(t.image,t.beginLine,t.beginColumn));:};
DECPROC::=  PROC: p ID: iden PFORMALES: pforms BLOQUE: bl
    {: RESULT = sem.proc(sem.str(p.image,p.beginLine,p.beginColumn), sem.str(iden.image,iden.beginLine,iden.beginColumn), pforms, bl);:};


    //////////////////////////////////////////////

PFORMALES ::=  PAP LISTA_PFORMALES  PCIERRE
    {: RESULT = dec;:};
PFORMALES ::=  PAP PCIERRE
    {: RESULT = dec;:};

LISTA_PFORMALES  ::=  PFORMAL COMA LISTA_PFORMALES
    {: RESULT = dec;:};
LISTA_PFORMALES  ::=  PFORMAL
    {: RESULT = dec;:};

PFORMAL ::=  TIPO AMP ID
    {: RESULT = dec;:};
PFORMAL ::=  TIPO ID
    {: RESULT = dec;:};

TIPO ::=  TIPO_BASICO
    {: RESULT = dec;:};
TIPO ::=  ID
    {: RESULT = dec;:};
TIPO ::=  ARRAY CAP LIT_ENT CCIERRE OF TIPO
    {: RESULT = dec;:};
TIPO ::=  RECORD LLAP LISTA_CAMPOS LLCIERRE
    {: RESULT = dec;:};
TIPO ::=  POINTER TIPO
    {: RESULT = dec;:};

TIPO_BASICO ::= INT
    {: RESULT = dec;:};
TIPO_BASICO ::= REAL
    {: RESULT = dec;:};
TIPO_BASICO ::= BOOL
    {: RESULT = dec;:};
TIPO_BASICO ::= STRING
    {: RESULT = dec;:};

LISTA_CAMPOS ::= CAMPO PCOMA LISTA_CAMPOS
    {: RESULT = dec;:};
LISTA_CAMPOS ::= CAMPO
    {: RESULT = dec;:};

CAMPO ::= TIPO ID
    {: RESULT = dec;:};

INSTRUCCIONES ::= INSTRUCCION PCOMA INSTRUCCIONES
    {: RESULT = dec;:};
INSTRUCCIONES ::= INSTRUCCION
    {: RESULT = dec;:};


INSTRUCCION ::= EXPRESION IGUAL EXPRESION
    {: RESULT = dec;:};
INSTRUCCION ::= IF EXPRESION THEN LISTA_INST_OP ELSE LISTA_INST ENDIF
    {: RESULT = dec;:};
INSTRUCCION ::= IF EXPRESION THEN LISTA_INST_OP ENDIF
    {: RESULT = dec;:};
INSTRUCCION ::= WHILE EXPRESION DO LISTA_INST_OP ENDWHILE
    {: RESULT = dec;:};
INSTRUCCION ::= READ EXPRESION
    {: RESULT = dec;:};
INSTRUCCION ::= WRITE EXPRESION
    {: RESULT = dec;:};
INSTRUCCION ::= NEW EXPRESION
    {: RESULT = dec;:};
INSTRUCCION ::= DELETE EXPRESION
    {: RESULT = dec;:};
INSTRUCCION ::= NL
    {: RESULT = dec;:};
INSTRUCCION ::= CALL ID PAP LISTA_EXPR_OP PCIERRE
    {: RESULT = dec;:};
INSTRUCCION ::= BLOQUE
    {: RESULT = dec;:};


LISTA_INST_OP ::= LISTA_INST
    {: RESULT = dec;:};
LISTA_INST_OP ::= 
    {: RESULT = dec;:};

LISTA_INST ::= INSTRUCCION PCOMA LISTA_INST
    {: RESULT = dec;:};
LISTA_INST ::= INSTRUCCION
    {: RESULT = dec;:};

LISTA_EXPR_OP ::= LISTA_EXPR
    {: RESULT = dec;:};
LISTA_EXPR_OP ::= 
    {: RESULT = dec;:};

LISTA_EXPR ::= EXPRESION COMA LISTA_EXPR
    {: RESULT = dec;:};
LISTA_EXPR ::= EXPRESION
    {: RESULT = dec;:};

BLOQUE ::= LLAP PROGRAMA LLCIERRE
    {: RESULT = dec;:};
BLOQUE ::= LLAP LLCIERRE
    {: RESULT = dec;:};

EXPRESION ::= E0
    {: RESULT = dec;:};

EXPRESION_BASICA ::= TRUE
    {: RESULT = dec;:};
EXPRESION_BASICA ::= FALSE
    {: RESULT = dec;:};
EXPRESION_BASICA ::= LIT_ENT
    {: RESULT = dec;:};
EXPRESION_BASICA ::= LIT_REAL
    {: RESULT = dec;:};
EXPRESION_BASICA ::= LIT_CAD
    {: RESULT = dec;:};
EXPRESION_BASICA ::= ID
    {: RESULT = dec;:};
EXPRESION_BASICA ::= NULL
    {: RESULT = dec;:};
    
    
    
    //////////////////////////////////////////////

E0 ::= E1 MAS E0
    {:RESULT = '+'; :};
E0 ::= E1 MENOS E1
    {:RESULT = '-'; :};
E0 ::= E1

E1 ::= E1 OPBN1 E2
E1 ::= E2

OPBN1 ::= AND
    {:RESULT = 'and'; :};
OPBN1 ::= OR
    {:RESULT = 'or'; :};

E2 ::= E2 OPBN2 E3
E2 ::= E3

OPBN2 ::= MENOR
    {:RESULT = '<'; :};
OPBN2 ::= MAYOR
    {:RESULT = '>'; :};
OPBN2 ::= MENOR_IGUAL
    {:RESULT = '<='; :};
OPBN2 ::= MAYOR_IGUAL
    {:RESULT = '>='; :};
OPBN2 ::= DIGUAL
    {:RESULT = '=='; :};
OPBN2 ::= DIF
    {:RESULT = '!='; :};

E3 ::= E4 OPBN3 E4
E3 ::= E4

OPBN3 ::= DIV
    {:RESULT = '/'; :};
OPBN3 ::= POR
    {:RESULT = '*'; :};
OPBN3 ::= PERCENT
    {:RESULT = '%'; :};

E4 ::= NOT E4
E4 ::= MENOS E5
E4 ::= E5

E5 ::= E5 OPUN5
E5 ::= E6

OPUN5 ::= CAP EXPRESION CCIERRE
OPUN5 ::= OP_ACCESO

OP_ACCESO ::= PUNTO ID
OP_ACCESO ::= FLECHA ID

E6 ::= POR E6
E6 ::= E7

E7 ::= EXPRESION_BASICA
E7 ::= PAP E0 PCIERRE




