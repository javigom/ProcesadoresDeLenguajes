options  {
  STATIC=false;
}  
PARSER_BEGIN(ConstructorAST)
package c_ast_descendente;


import asint.TinyASint.Exp;
import asint.TinyASint.Exps;
import asint.TinyASint.Declaracion;
import asint.TinyASint.Declaraciones;
import asint.TinyASint.Instruccion;
import asint.TinyASint.Instrucciones;
import asint.TinyASint.Camps;
import asint.TinyASint.Camp;
import asint.TinyASint.Tipo;
import asint.TinyASint.Bloque;
import asint.TinyASint.ParamForms;
import asint.TinyASint.ParamForm;
import asint.TinyASint.Programa;
import semops.SemOps;


public class ConstructorAST {
   private SemOps sem = new SemOps();
}
PARSER_END(ConstructorAST)
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: ["."] ((<digito>)* <digitoPositivo> | "0")>}
  TOKEN:{<#parteExponencial: ["e", "E"] <litEnt>>}
  TOKEN:{<#signo: ["+","-"]>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"#"(~["\n"])*>}  
  TOKEN: {<AND:"and">}
  TOKEN: {<OR:"or">} 
  TOKEN: {<NOT:"not">}
  TOKEN: {<FALSE:"false">} 
  TOKEN: {<TRUE:"true">}
  TOKEN: {<INT:"int">} 
  TOKEN: {<REAL:"real">}
  TOKEN: {<STRING:"string">} 
  TOKEN: {<BOOL:"bool">}
  TOKEN: {<NULL:"null">} 
  TOKEN: {<PROC:"proc">}
  TOKEN: {<IF:"if">} 
  TOKEN: {<THEN:"then">}
  TOKEN: {<ELSE:"else">} 
  TOKEN: {<ENDIF:"endif">}
  TOKEN: {<WHILE:"while">} 
  TOKEN: {<DO:"do">}
  TOKEN: {<ENDWHILE:"endwhile">} 
  TOKEN: {<CALL:"call">}
  TOKEN: {<RECORD:"record">} 
  TOKEN: {<ARRAY:"array">}
  TOKEN: {<OF:"of">} 
  TOKEN: {<POINTER:"pointer">}
  TOKEN: {<NEW:"new">} 
  TOKEN: {<DELETE:"delete">}
  TOKEN: {<READ:"read">} 
  TOKEN: {<WRITE:"write">}
  TOKEN: {<NL:"nl">} 
  TOKEN: {<VAR:"var">}
  TOKEN: {<TYPE:"type">}
  TOKEN: {<comillas:"\"">}
  TOKEN: {<litCad:<comillas>(~["\"","\r","\b","\n"])*<comillas>>}
  TOKEN: {<identificador:<letra>(<letra>|<digito>|"_")*>}
  TOKEN: {<litEnt: (<signo>)? <parteEntera> >}
  TOKEN: {<litReal: <litEnt> (<parteDecimal> | <parteExponencial> | <parteDecimal> <parteExponencial>)>  }
  
  
  Programa PROGRAMAp()    : {Programa prog;} {prog=PROGRAMA() <EOF> {return prog;}}
  Programa PROGRAMA()    : {Declaraciones decs;}
  						{decs=DECLARACIONES() "&&" ins=INSTRUCCIONES() {return sem.P_decs(decs,ins);} | ins=INSTRUCCIONES() {return sem.P_nodecs(ins);}}
  




  Declaraciones DECLARACIONES()  : {Declaraciones decs;} 
                       {decs = RDECLARACIONES(sem.decs_una(dec)) dec=DECLARACION() {return decs;}}
 
  Declaraciones RDECLARACIONES(Declaracion decs_h)    : {Declaracion dec; Declaraciones decs;} {decs = RDECLARACIONES(sem.decs_muchas(decs_h, dec)) dec = DECLARACION() ";" {return decs;} | {return decs_h;} }
  Declaraciones DECLARACION()    : {Declaracion dec;} {dec = DECVAR() {return dec;}| dec = DECTIPO() {return dec;} | dec = DECPROC() {return dec;} }

 




  Declaracion DECVAR()    : {Token v, iden; TIPO tipo;} {v=<VAR> tipo = TIPO() iden=<identificador> {return sem.decvar(tipo, sem.str(iden.image,iden.beginLine,iden.beginColumn));}}
  Declaracion DECTIPO()    : {Token t, iden; TIPO tipo;} {t=<TYPE> tipo = TIPO() iden=<identificador> {return sem.dectipo(tipo, sem.str(iden.image,iden.beginLine,iden.beginColumn));}}
  Declaracion DECPROC()    : {Token p, iden; ParamForms  pforms; B bl;} {p=<PROC> iden=<identificador> pforms = PFORMALES() bl = BLOQUE(){return sem.decproc(sem.str(iden.image,iden.beginLine,iden.beginColumn), pforms, bl);}}
 




  ParamForms  PFORMALES()    : {ParamForms  pforms;} 
  						  { "(" pforms = LISTA_PFORMALES() ")" {return pforms;} | "(" ")" {return sem.pformales_empty();}}
  						  
  						
  ParamForms  LISTA_PFORMALES()    : {ParamForms  pforms; ParamForm pform;} 
  								{pforms = RLISTA_PFORMALES(sem.pformal_uno(pform)) pform = PFORMAL() {return pforms;}}

  ParamForms  RLISTA_PFORMALES(ParamForms  pforms_h)    : {ParamForms  pforms; ParamForm pform;}
  												{pforms = RLISTA_PFORMALES(sem.pformal_muchas(pforms_h, pform)) pform = PFORMAL() "," {return pforms;} | {return pforms_h;} }





  ParamForm PFORMAL()    : {TIPO t; Token id;}
						{t=TIPO() "&" id=<identificador> {return sem.pformal_ref(t,sem.str(id.image,id.beginLine,id.beginColumn));} | t=TIPO() id=<identificador> {return sem.pformal_ref(t,sem.str(id.image,id.beginLine,id.beginColumn));}}





  Tipo TIPO()    : {TIPO tb, t; Token id, le; Camps l;}
				   {tb = TIPO_BASICO() {return tb;}|
				    id=<identificador> {return sem.tipo_id(sem.str(id.image,id.beginLine,id.beginColumn));} |
				    <ARRAY> "[" le=<litEnt> "]" <OF> t = TIPO() {return sem.array(sem.str(le.image,le.beginLine,le.beginColumn), t);}|
				    <RECORD> "{" l=LISTA_CAMPOS() "}" {return sem.tipo_record(l);}|
				    <POINTER> t=TIPO() {return sem.tipo_pointer(t);}}
				    
  Tipo 	 TIPO_BASICO()    : {}
						  {<INT> {return sem.int_cons();}|
						   <REAL> {return sem.real_cons();}|
						   <BOOL> {return sem.bool_cons();}|
						   <STRING> {return sem.string_cons();}}








  Camps LISTA_CAMPOS()    : {Camp c; Camps rl;}
							{rl = RLISTA_CAMPOS(sem.campo_uno(c)) c=CAMPO() {return rl;}}

  Camps RLISTA_CAMPOS(Camps campos_h)    : {Camp c; Camps campos;}
										{campos = RLISTA_CAMPOS(sem.campo_muchos(campos_h, c)) c=CAMPO() ";" {return campos;} | {return campos_h;} }

  Camp CAMPO()    : {Tipo t; Token id;}
					{t=TIPO() id=<identificador> {return sem.campo(t,sem.str(id.image,id.beginLine,id.beginColumn));}}





  Instrucciones INSTRUCCIONES()    : {Instruccion  in; Instrucciones ins;}
  							{ins=RINST(sem.ins_una(in)) in=INSTRUCCION() {return ins;}}
  							
  Instrucciones RINST(Instrucciones ins_h)    : {Instruccion  in; Instrucciones ins;}
								{ins=RINST(sem.ins_muchas(ins_h, in)) in=INSTRUCCION() ";" {return ins;} | {return ins_h;}}
  
  Instruccion INSTRUCCION()    : {Exp ex, ex1, ex2; Instrucciones l_ins1, l_ins; Token id; Exps l_exp; B b;}
						{ ex1=EXPRESION() "=" ex2=EXPRESION() {return sem.asig(ex1,ex2);}|
						 <IF> ex=EXPRESION() <THEN> l_ins=LISTA_INST_OP() <ENDIF> {return sem.if_inst(ex,l_ins,rif);}|
						 <IF> ex=EXPRESION() <THEN> l_ins=LISTA_INST_OP() <ELSE> l_ins1=RIFTHEN() <ENDIF> {return sem.if_else(ex,l_ins,l_ins1);}|
  					     <WHILE> ex=EXPRESION() <DO> l_ins=LISTA_INST_OP()  <ENDWHILE> {return sem.while_inst(ex,l_ins);}|
  					     <READ> ex=EXPRESION() {return sem.read(ex);}|
  					     <WRITE> ex=EXPRESION() {return sem.write(ex);}|
  					     <NL> {return sem.nl();}|
  					     <NEW> ex=EXPRESION() {return sem.new_cons(ex);}|
  						 <DELETE> ex=EXPRESION() {return sem.delete(ex);}|
  						 <CALL> id=<identificador> "(" l_exp=LISTA_EXPR_OP() ")" {return sem.call(str(id.image,id.beginLine,id.beginColumn),l_exp);}|
  						 b=BLOQUE() {return se.bloque_inst(b);}}






  Instrucciones LISTA_INST_OP()    : {Instrucciones l;}
							{l=LISTA_INST() {return l;} | {return sem.noins();} }

  Instrucciones LISTA_INST()    : {Instruccion in; Instrucciones ins;}
						{ins=RLISTA_INST(sem.ins_una(in)) in=INSTRUCCION() {return ins;}}

  Instrucciones RLISTA_INST(Instrucciones ins_h)    : {Instruccion in; Instrucciones ins;}
									 {ins=RLISTA_INST(sem.ins_muchas(ins_h, in)) in=INSTRUCCION() ";" {return ins;} | {return ins_h;}}  





  Exps LISTA_EXPR_OP()    : {Exps exs;}
							{exs=LISTA_EXPR() {return exs;} | {return sem.lista_exp_empty();}}  

  Exps LISTA_EXPR()    : {Exp ex; Exps exs;}
						{exs=RLISTA_EXPR(sem.exp_una(ex)) ex=EXPRESION() {return exs}}

  Exps RLISTA_EXPR(Exps exps_h)    : {Exp exp; Exps exps;}
									{exps=RLISTA_EXPR(sem.exp_muchas(exps_h, exp)) exp=EXPRESION() "," {return exps;} | {return exps_h;}}
  




  Bloque BLOQUE()    : {Programa p;}
				  { "{" p=PROGRAMA() "}" {return sem.bloque_prog(p);} | "{" "}" {return sem.no_bloque();}} 
  





  EX EXPRESION()    : {Exp ex;}
					  {ex=E0() {return ex;} }
					
  Exp EXPRESION_BASICA()    : {Token t;}
							{t=<TRUE> {return sem.litTrue();}|
							 t=<FALSE> {return sem.litFalse();}|
							 t=<identificador> {return sem.id(sem.str(t.image,t.beginLine,t.beginColumn));}|
							 t=<NULL> {return sem.litNull();}|
							 t=<litEnt> {return sem.litEnt(sem.str(t.image,t.beginLine,t.beginColumn));}|
							 t=<litReal> {return sem.litReal(sem.str(t.image,t.beginLine,t.beginColumn));}|
							 t=<litCad> {return sem.litCad(sem.str(t.image,t.beginLine,t.beginColumn));}}
  


  Exp E0()       : {Exp exp, resul;} {resul=RE0(exp) exp=E1() {return resul;}}
  Exp RE0(Exp exph) : {Exp exp;} 
                       {exp=E0() "+" {return sem.exp("+",exp,exph);} |
                       {exp=E1() "-" {return sem.exp("-",exp,exph);} |
                       {return exph;}}
                   
  
  
  Exp E1()   : {Exp exp, resul;} {resul=RE1(exp) exp=E2() {return resul;}}
  Exp RE1(Exp exph)  : {string op; Exp exp, resul;}
						{resul=RE1(sem.exp(op,exp,exph)) exp=E2() op=OPBN1() {return resul}|
						{return exph;} }


  
  Exp E2()   : {Exp exp, resul;} {resul=RE2(exp) exp=E3() {return resul;}}
  Exp RE2(Exp exph)  : {string op; Exp exp, resul;}
						{resul = RE2(sem.exp(op,exp,exph)) exp=E3() op=OPBN2() {return resul}|
						{return exph;} }

						
  
  Exp E3()   : {Exp exp, resul;} {resul=RE3(exp) exp=E4() {return resul;}}
  Exp RE3(Exp exph)  : {string op; Exp exp, resul;}
  						{exp=E4() op=OPBN3() {return sem.exp(op,exph,exp);} |
  						{return exph;} }
  						
  
  Exp E4()   : {Exp resul;}
  				{<NOT> resul=E4() {return sem.exp('not', exp);}|
  				 "-" resul=E5() {return sem.exp('-', exp);;}|
  				  resul=E5() {return resul;}}
  
  Exp E5()	  : {Exp exp, op;}
  				{exp=E6() {return exp;} |
  				{exp=E5() op=OPUN5() {return sem.exp(exp, op);} }

  Exp E6()   : {Exp exp;} {"*" exp=E6() {return sem.exp('*', exp);} | exp=E7() {return exp;}}
  Exp E7()   : {Exp exp;} {exp=EXPRESION_BASICA() {return exp;} | "(" exp=E0() ")" {return exp;}} 
  
  string OPBN1()  : {} {<AND> {return "and";} | <OR> {return "or";}}
  string OPBN2()  : {} {"<" {return "<";} | ">" {return ">";} | "<=" {return '<=';}| ">=" {return ">=";} | "==" {return "==";}| "!=" {return "!=";}}
  string OPBN3()  : {} {"*" {return "*";} | "/" {return "/";}| "%" {return "%";}}
  Exp OPUN5()  : {Exp exp;} {"[" exp=EXPRESION() "]" {return sem.corchete(exp);} | exp=OP_ACCESO() {return exp;}}
  
  Exp OP_ACCESO()  : {Token iden;} {"." iden=<identificador> {return sem.punto(sem.str(iden.image,iden.beginLine,iden.beginColumn))}| "->" iden=<identificador> {return sem.flecha(sem.str(iden.image,iden.beginLine,iden.beginColumn))}}