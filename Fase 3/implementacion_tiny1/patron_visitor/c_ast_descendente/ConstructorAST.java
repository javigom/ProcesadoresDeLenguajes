/* Generated By:JavaCC: Do not edit this line. ConstructorAST.java */
package c_ast_descendente;


import asint.TinyASint.Exp;
import asint.TinyASint.Exps;
import asint.TinyASint.Declaracion;
import asint.TinyASint.Declaraciones;
import asint.TinyASint.Instruccion;
import asint.TinyASint.Instrucciones;
import asint.TinyASint.Camps;
import asint.TinyASint.Camp;
import asint.TinyASint.Tipo;
import asint.TinyASint.Bloque;
import asint.TinyASint.ParamForms;
import asint.TinyASint.ParamForm;
import asint.TinyASint.Programa;
import semops.SemOps;


public class ConstructorAST implements ConstructorASTConstants {
   private SemOps sem = new SemOps();

  final public Programa PROGRAMAp() throws ParseException {
                             Programa prog;
    prog = PROGRAMA();
    jj_consume_token(0);
                                                                     {if (true) return prog;}
    throw new Error("Missing return statement in function");
  }

  final public Programa PROGRAMA() throws ParseException {
                            Declaraciones decs; Instrucciones ins;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROC:
    case VAR:
    case TYPE:
      decs = DECLARACIONES();
      jj_consume_token(45);
      ins = INSTRUCCIONES();
                                                                                                {if (true) return sem.P_decs(decs,ins);}
      break;
    case NOT:
    case FALSE:
    case TRUE:
    case NULL:
    case IF:
    case WHILE:
    case CALL:
    case NEW:
    case DELETE:
    case READ:
    case WRITE:
    case NL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
    case 47:
    case 53:
    case 56:
    case 57:
    case 58:
      ins = INSTRUCCIONES();
                                                                                                                                                     {if (true) return sem.P_nodecs(ins);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Declaraciones DECLARACIONES() throws ParseException {
                                    Declaracion dec; Declaraciones decs;
    dec = DECLARACION();
    decs = RDECLARACIONES(sem.decs_una(dec));
                                                                                    {if (true) return decs;}
    throw new Error("Missing return statement in function");
  }

  final public Declaraciones RDECLARACIONES(Declaraciones decs_h) throws ParseException {
                                                           Declaracion dec; Declaraciones decs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      dec = DECLARACION();
      decs = RDECLARACIONES(sem.decs_muchas(decs_h, dec));
                                                                                                                                                                               {if (true) return decs;}
      break;
    default:
      jj_la1[1] = jj_gen;
                                                                                                                                                                                                {if (true) return decs_h;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Declaracion DECLARACION() throws ParseException {
                                  Declaracion dec;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      dec = DECVAR();
                                                                     {if (true) return dec;}
      break;
    case TYPE:
      dec = DECTIPO();
                                                                                                    {if (true) return dec;}
      break;
    case PROC:
      dec = DECPROC();
                                                                                                                                    {if (true) return dec;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Declaracion DECVAR() throws ParseException {
                             Token v, iden; Tipo tipo;
    v = jj_consume_token(VAR);
    tipo = TIPO();
    iden = jj_consume_token(identificador);
                                                                                                     {if (true) return sem.decvar(tipo, sem.str(iden.image,iden.beginLine,iden.beginColumn));}
    throw new Error("Missing return statement in function");
  }

  final public Declaracion DECTIPO() throws ParseException {
                              Token t, iden; Tipo tipo;
    t = jj_consume_token(TYPE);
    tipo = TIPO();
    iden = jj_consume_token(identificador);
                                                                                                       {if (true) return sem.dectipo(tipo, sem.str(iden.image,iden.beginLine,iden.beginColumn));}
    throw new Error("Missing return statement in function");
  }

  final public Declaracion DECPROC() throws ParseException {
                              Token p, iden; ParamForms  pforms; Bloque bl;
    p = jj_consume_token(PROC);
    iden = jj_consume_token(identificador);
    pforms = PFORMALES();
    bl = BLOQUE();
                                                                                                                                               {if (true) return sem.decproc(sem.str(iden.image,iden.beginLine,iden.beginColumn), pforms, bl);}
    throw new Error("Missing return statement in function");
  }

  final public ParamForms PFORMALES() throws ParseException {
                                ParamForms  pforms;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      pforms = LISTA_PFORMALES();
      jj_consume_token(48);
                                                                                        {if (true) return pforms;}
      break;
      jj_consume_token(47);
      jj_consume_token(48);
                                                                                                                   {if (true) return sem.pformales_empty();}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ParamForms LISTA_PFORMALES() throws ParseException {
                                      ParamForms  pforms; ParamForm pform;
    pform = PFORMAL();
    pforms = RLISTA_PFORMALES(sem.pformales_uno(pform));
                                                                                                                                        {if (true) return pforms;}
    throw new Error("Missing return statement in function");
  }

  final public ParamForms RLISTA_PFORMALES(ParamForms  pforms_h) throws ParseException {
                                                           ParamForms  pforms; ParamForm pform;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      jj_consume_token(49);
      pform = PFORMAL();
      pforms = RLISTA_PFORMALES(sem.pformales_muchos(pforms_h, pform));
                                                                                                                                                                                         {if (true) return pforms;}
      break;
    default:
      jj_la1[4] = jj_gen;
                                                                                                                                                                                                            {if (true) return pforms_h;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ParamForm PFORMAL() throws ParseException {
                            Tipo t; Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case REAL:
    case STRING:
    case BOOL:
    case RECORD:
    case ARRAY:
    case POINTER:
    case identificador:
      t = TIPO();
      jj_consume_token(50);
      id = jj_consume_token(identificador);
                                                                                  {if (true) return sem.pformal_ref(t,sem.str(id.image,id.beginLine,id.beginColumn));}
      break;
      t = TIPO();
      id = jj_consume_token(identificador);
                                                                                                                                                                                           {if (true) return sem.pformal_ref(t,sem.str(id.image,id.beginLine,id.beginColumn));}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Tipo TIPO() throws ParseException {
                    Tipo tb, t; Token id, le; Camps l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case REAL:
    case STRING:
    case BOOL:
      tb = TIPO_BASICO();
                                                        {if (true) return tb;}
      break;
    case identificador:
      id = jj_consume_token(identificador);
                                                        {if (true) return sem.tipo_id(sem.str(id.image,id.beginLine,id.beginColumn));}
      break;
    case ARRAY:
      jj_consume_token(ARRAY);
      jj_consume_token(51);
      le = jj_consume_token(litEnt);
      jj_consume_token(52);
      jj_consume_token(OF);
      t = TIPO();
                                                                                 {if (true) return sem.tipo_array(sem.str(le.image,le.beginLine,le.beginColumn), t);}
      break;
    case RECORD:
      jj_consume_token(RECORD);
      jj_consume_token(53);
      l = LISTA_CAMPOS();
      jj_consume_token(54);
                                                                       {if (true) return sem.tipo_record(l);}
      break;
    case POINTER:
      jj_consume_token(POINTER);
      t = TIPO();
                                                        {if (true) return sem.tipo_pointer(t);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Tipo TIPO_BASICO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
                                                          {if (true) return sem.int_cons();}
      break;
    case REAL:
      jj_consume_token(REAL);
                                                           {if (true) return sem.real_cons();}
      break;
    case BOOL:
      jj_consume_token(BOOL);
                                                           {if (true) return sem.bool_cons();}
      break;
    case STRING:
      jj_consume_token(STRING);
                                                             {if (true) return sem.string_cons();}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Camps LISTA_CAMPOS() throws ParseException {
                             Camp c; Camps rl;
    c = CAMPO();
    rl = RLISTA_CAMPOS(sem.campo_uno(c));
                                                                                                         {if (true) return rl;}
    throw new Error("Missing return statement in function");
  }

  final public Camps RLISTA_CAMPOS(Camps campos_h) throws ParseException {
                                            Camp c; Camps campos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      c = CAMPO();
      campos = RLISTA_CAMPOS(sem.campos_muchos(campos_h, c));
                                                                                                                                                       {if (true) return campos;}
      break;
    default:
      jj_la1[8] = jj_gen;
                                                                                                                                                                          {if (true) return campos_h;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Camp CAMPO() throws ParseException {
                     Tipo t; Token id;
    t = TIPO();
    id = jj_consume_token(identificador);
                                                                      {if (true) return sem.campo(t,sem.str(id.image,id.beginLine,id.beginColumn));}
    throw new Error("Missing return statement in function");
  }

  final public Instrucciones INSTRUCCIONES() throws ParseException {
                                      Instruccion  in; Instrucciones ins;
    in = INSTRUCCION();
    ins = RINST(sem.insts_una(in));
                                                                                                        {if (true) return ins;}
    throw new Error("Missing return statement in function");
  }

  final public Instrucciones RINST(Instrucciones ins_h) throws ParseException {
                                                 Instruccion  in; Instrucciones ins;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      in = INSTRUCCION();
      ins = RINST(sem.insts_muchas(ins_h, in));
                                                                                                                              {if (true) return ins;}
      break;
    default:
      jj_la1[9] = jj_gen;
                                                                                                                                              {if (true) return ins_h;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Instruccion INSTRUCCION() throws ParseException {
                                  Exp ex, ex1, ex2; Instrucciones l_ins1, l_ins; Token id; Exps l_exp; Bloque b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case FALSE:
    case TRUE:
    case NULL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
    case 47:
    case 56:
    case 57:
    case 58:
      ex1 = EXPRESION();
      jj_consume_token(55);
      ex2 = EXPRESION();
                                                                                       {if (true) return sem.asig(ex1,ex2);}
      break;
    case IF:
      jj_consume_token(IF);
      ex = EXPRESION();
      jj_consume_token(THEN);
      l_ins = LISTA_INST_OP();
      jj_consume_token(ENDIF);
                                                                                                           {if (true) return sem.if_inst(ex,l_ins,rif);}
      break;
      jj_consume_token(IF);
      ex = EXPRESION();
      jj_consume_token(THEN);
      l_ins = LISTA_INST_OP();
      jj_consume_token(ELSE);
      l_ins1 = LISTA_INST();
      jj_consume_token(ENDIF);
                                                                                                                                      {if (true) return sem.if_else(ex,l_ins,l_ins1);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      ex = EXPRESION();
      jj_consume_token(DO);
      l_ins = LISTA_INST_OP();
      jj_consume_token(ENDWHILE);
                                                                                                            {if (true) return sem.while_inst(ex,l_ins);}
      break;
    case READ:
      jj_consume_token(READ);
      ex = EXPRESION();
                                                                    {if (true) return sem.read(ex);}
      break;
    case WRITE:
      jj_consume_token(WRITE);
      ex = EXPRESION();
                                                                     {if (true) return sem.write(ex);}
      break;
    case NL:
      jj_consume_token(NL);
                                                   {if (true) return sem.nl();}
      break;
    case NEW:
      jj_consume_token(NEW);
      ex = EXPRESION();
                                                                   {if (true) return sem.new_cons(ex);}
      break;
    case DELETE:
      jj_consume_token(DELETE);
      ex = EXPRESION();
                                                                          {if (true) return sem.delete(ex);}
      break;
    case CALL:
      jj_consume_token(CALL);
      id = jj_consume_token(identificador);
      jj_consume_token(47);
      l_exp = LISTA_EXPR_OP();
      jj_consume_token(48);
                                                                                                          {if (true) return sem.call(str(id.image,id.beginLine,id.beginColumn),l_exp);}
      break;
    case 53:
      b = BLOQUE();
                                                             {if (true) return se.bloque_inst(b);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Instrucciones LISTA_INST_OP() throws ParseException {
                                      Instrucciones l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case FALSE:
    case TRUE:
    case NULL:
    case IF:
    case WHILE:
    case CALL:
    case NEW:
    case DELETE:
    case READ:
    case WRITE:
    case NL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
    case 47:
    case 53:
    case 56:
    case 57:
    case 58:
      l = LISTA_INST();
                                                                         {if (true) return l;}
      break;
    default:
      jj_la1[11] = jj_gen;
                                                                                       {if (true) return sem.noins();}
    }
    throw new Error("Missing return statement in function");
  }

  final public Instrucciones LISTA_INST() throws ParseException {
                                   Instruccion in; Instrucciones ins;
    in = INSTRUCCION();
    ins = RLISTA_INST(sem.insts_una(in));
                                                                                                      {if (true) return ins;}
    throw new Error("Missing return statement in function");
  }

  final public Instrucciones RLISTA_INST(Instrucciones ins_h) throws ParseException {
                                                       Instruccion in; Instrucciones ins;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      in = INSTRUCCION();
      ins = RLISTA_INST(sem.insts_muchas(ins_h, in));
                                                                                                                                             {if (true) return ins;}
      break;
    default:
      jj_la1[12] = jj_gen;
                                                                                                                                                             {if (true) return ins_h;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exps LISTA_EXPR_OP() throws ParseException {
                             Exps exs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case FALSE:
    case TRUE:
    case NULL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
    case 47:
    case 56:
    case 57:
    case 58:
      exs = LISTA_EXPR();
                                                                           {if (true) return exs;}
      break;
    default:
      jj_la1[13] = jj_gen;
                                                                                           {if (true) return sem.lista_exp_empty();}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exps LISTA_EXPR() throws ParseException {
                          Exp ex; Exps exs;
    ex = EXPRESION();
    exs = RLISTA_EXPR(sem.exp_una(ex));
                                                                                                  {if (true) return exs;}
    throw new Error("Missing return statement in function");
  }

  final public Exps RLISTA_EXPR(Exps exps_h) throws ParseException {
                                      Exp exp; Exps exps;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      jj_consume_token(49);
      exp = EXPRESION();
      exps = RLISTA_EXPR(sem.exp_muchas(exps_h, exp));
                                                                                                                                            {if (true) return exps;}
      break;
    default:
      jj_la1[14] = jj_gen;
                                                                                                                                                             {if (true) return exps_h;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Bloque BLOQUE() throws ParseException {
                        Programa p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 53:
      jj_consume_token(53);
      p = PROGRAMA();
      jj_consume_token(54);
                                                          {if (true) return sem.bloque_prog(p);}
      break;
      jj_consume_token(53);
      jj_consume_token(54);
                                                                                                 {if (true) return sem.no_bloque();}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp EXPRESION() throws ParseException {
                        Exp ex;
    ex = E0();
                                                    {if (true) return ex;}
    throw new Error("Missing return statement in function");
  }

  final public Exp EXPRESION_BASICA() throws ParseException {
                               Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
                                                                   {if (true) return sem.litTrue();}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                                                                    {if (true) return sem.litFalse();}
      break;
    case identificador:
      t = jj_consume_token(identificador);
                                                                            {if (true) return sem.id(sem.str(t.image,t.beginLine,t.beginColumn));}
      break;
    case NULL:
      t = jj_consume_token(NULL);
                                                                   {if (true) return sem.litNull();}
      break;
    case litEnt:
      t = jj_consume_token(litEnt);
                                                                     {if (true) return sem.litEnt(sem.str(t.image,t.beginLine,t.beginColumn));}
      break;
    case litReal:
      t = jj_consume_token(litReal);
                                                                      {if (true) return sem.litReal(sem.str(t.image,t.beginLine,t.beginColumn));}
      break;
    case litCad:
      t = jj_consume_token(litCad);
                                                                     {if (true) return sem.litCad(sem.str(t.image,t.beginLine,t.beginColumn));}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E0() throws ParseException {
                    Exp exp, resul;
    resul = RE0(exp);
    exp = E1();
                                                               {if (true) return resul;}
    throw new Error("Missing return statement in function");
  }

  final public Exp RE0(Exp exph) throws ParseException {
                       Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      jj_consume_token(56);
      exp = E0();
                                      {if (true) return sem.exp("+",exp,exph);}
      break;
    case 57:
      jj_consume_token(57);
      exp = E1();
                                      {if (true) return sem.exp("-",exp,exph);}
      break;
    default:
      jj_la1[17] = jj_gen;
                        {if (true) return exph;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E1() throws ParseException {
                Exp exp, resul;
    exp = E2();
    resul = RE1(exp);
                                                           {if (true) return resul;}
    throw new Error("Missing return statement in function");
  }

  final public Exp RE1(Exp exph) throws ParseException {
                        String op; Exp exp, resul;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
      op = OPBN1();
      exp = E2();
      resul = RE1(sem.exp(op,exp,exph));
                                                                                                      {if (true) return resul;}
      break;
    default:
      jj_la1[18] = jj_gen;
                                                 {if (true) return exph;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E2() throws ParseException {
                Exp exp, resul;
    exp = E3();
    resul = RE2(exp);
                                                           {if (true) return resul;}
    throw new Error("Missing return statement in function");
  }

  final public Exp RE2(Exp exph) throws ParseException {
                        String op; Exp exp, resul;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
      op = OPBN2();
      exp = E3();
      resul = RE2(sem.exp(op,exp,exph));
                                                                                                        {if (true) return resul;}
      break;
    default:
      jj_la1[19] = jj_gen;
                                                 {if (true) return exph;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E3() throws ParseException {
                Exp exp, resul;
    exp = E4();
    resul = RE3(exp);
                                                           {if (true) return resul;}
    throw new Error("Missing return statement in function");
  }

  final public Exp RE3(Exp exph) throws ParseException {
                        String op; Exp exp, resul;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
    case 65:
    case 66:
      op = OPBN3();
      exp = E4();
                                                                      {if (true) return sem.exp(op,exph,exp);}
      break;
    default:
      jj_la1[20] = jj_gen;
                                                 {if (true) return exph;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E4() throws ParseException {
                Exp resul;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      resul = E4();
                                                   {if (true) return sem.exp("not", resul);}
      break;
    case 57:
      jj_consume_token(57);
      resul = E5();
                                                 {if (true) return sem.exp("-", resul);}
      break;
    case FALSE:
    case TRUE:
    case NULL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
    case 47:
    case 58:
      resul = E5();
                                              {if (true) return resul;}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E5() throws ParseException {
                Exp exp, resul;
    exp = E6();
    resul = RE5(exp);
                                                           {if (true) return resul;}
    throw new Error("Missing return statement in function");
  }

  final public Exp RE5(Exp exph) throws ParseException {
                        Exp op, exp, resul;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
    case 67:
    case 68:
      op = OPUN5();
      exp = RE5();
                                                                       {if (true) return sem.exp(op,exph,exp);}
      break;
    default:
      jj_la1[22] = jj_gen;
                                                 {if (true) return exph;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E6() throws ParseException {
                Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      exp = E6();
                                         {if (true) return sem.exp('*', exp);}
      break;
    case FALSE:
    case TRUE:
    case NULL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
    case 47:
      exp = E7();
                                                                                {if (true) return exp;}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E7() throws ParseException {
                Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case NULL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
      exp = EXPRESION_BASICA();
                                                   {if (true) return exp;}
      break;
    case 47:
      jj_consume_token(47);
      exp = E0();
      jj_consume_token(48);
                                                                                    {if (true) return exp;}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String OPBN1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
                               {if (true) return "and";}
      break;
    case OR:
      jj_consume_token(OR);
                                                      {if (true) return "or";}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String OPBN2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
                             {if (true) return "<";}
      break;
    case 60:
      jj_consume_token(60);
                                                 {if (true) return ">";}
      break;
    case 61:
      jj_consume_token(61);
                                                                      {if (true) return "<=";}
      break;
    case 62:
      jj_consume_token(62);
                                                                                           {if (true) return ">=";}
      break;
    case 63:
      jj_consume_token(63);
                                                                                                                 {if (true) return "==";}
      break;
    case 64:
      jj_consume_token(64);
                                                                                                                                      {if (true) return "!=";}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String OPBN3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
                             {if (true) return "*";}
      break;
    case 65:
      jj_consume_token(65);
                                                 {if (true) return "/";}
      break;
    case 66:
      jj_consume_token(66);
                                                                    {if (true) return "%";}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp OPUN5() throws ParseException {
                  Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
      exp = EXPRESION();
      jj_consume_token(52);
                                                      {if (true) return sem.corchete(exp);}
      break;
    case 67:
    case 68:
      exp = OP_ACCESO();
                                                                                                    {if (true) return exp;}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp OP_ACCESO() throws ParseException {
                      Token iden;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
      jj_consume_token(67);
      iden = jj_consume_token(identificador);
                                                              {if (true) return sem.punto(sem.str(iden.image,iden.beginLine,iden.beginColumn));}
      break;
    case 68:
      jj_consume_token(68);
      iden = jj_consume_token(identificador);
                                                                                                                                                                  {if (true) return sem.flecha(sem.str(iden.image,iden.beginLine,iden.beginColumn));}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  public ConstructorASTTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x12387000,0x0,0x100000,0x0,0x0,0x60078000,0x60078000,0x78000,0x0,0x0,0x12287000,0x12287000,0x0,0x87000,0x0,0x0,0x86000,0x0,0xc00,0x0,0x0,0x87000,0x0,0x86000,0x86000,0xc00,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x7209efe,0x4000,0xc0,0x8000,0x20000,0x401,0x401,0x0,0x4000,0x4000,0x7209e3e,0x7209e3e,0x4000,0x7009e00,0x20000,0x200000,0x1e00,0x3000000,0x0,0xf8000000,0x4000000,0x6009e00,0x80000,0x4009e00,0x9e00,0x0,0xf8000000,0x4000000,0x80000,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x6,0x0,0x18,0x0,0x0,0x0,0x1,0x6,0x18,0x18,};
   }

  public ConstructorAST(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConstructorASTTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  public ConstructorAST(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConstructorASTTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  public ConstructorAST(ConstructorASTTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  public void ReInit(ConstructorASTTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[69];
    for (int i = 0; i < 69; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
