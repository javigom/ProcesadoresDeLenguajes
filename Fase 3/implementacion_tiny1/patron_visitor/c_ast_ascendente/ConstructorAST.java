
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 08 21:48:09 CEST 2022
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import semops.SemOps;
import asint.TinyASint.Exp;
import asint.TinyASint.Exps;
import asint.TinyASint.Declaracion;
import asint.TinyASint.Declaraciones;
import asint.TinyASint.Instruccion;
import asint.TinyASint.Instrucciones;
import asint.TinyASint.Camps;
import asint.TinyASint.Camp;
import asint.TinyASint.Tipo;
import asint.TinyASint.Bloque;
import asint.TinyASint.ParamForms;
import asint.TinyASint.ParamForm;
import asint.TinyASint.Programa;
import asint.TinyASint.StringLocalizado;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 08 21:48:09 CEST 2022
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\006\005\000\002\007\006\000\002\016\005\000\002" +
    "\016\004\000\002\017\005\000\002\017\003\000\002\020" +
    "\005\000\002\020\004\000\002\014\003\000\002\014\003" +
    "\000\002\014\010\000\002\014\006\000\002\014\004\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\021\005\000\002\021\003\000\002\022" +
    "\004\000\002\010\005\000\002\010\003\000\002\013\005" +
    "\000\002\013\011\000\002\013\007\000\002\013\007\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\013\007\000\002\013" +
    "\003\000\002\012\003\000\002\012\002\000\002\011\005" +
    "\000\002\011\003\000\002\024\003\000\002\024\002\000" +
    "\002\025\005\000\002\025\003\000\002\023\005\000\002" +
    "\023\004\000\002\040\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\027\005\000\002" +
    "\027\003\000\002\042\003\000\002\042\003\000\002\030" +
    "\005\000\002\030\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\031\005\000\002\031\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\032" +
    "\004\000\002\032\004\000\002\032\003\000\002\033\004" +
    "\000\002\033\003\000\002\036\005\000\002\036\003\000" +
    "\002\041\004\000\002\041\004\000\002\034\004\000\002" +
    "\034\003\000\002\035\003\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\060\005\027\007\004\012\014\022\033\032" +
    "\053\033\016\034\041\037\023\040\044\041\030\045\017" +
    "\054\021\057\037\063\035\064\034\065\013\066\024\067" +
    "\012\070\020\072\022\073\026\074\006\075\007\001\002" +
    "\000\024\007\004\022\033\037\023\040\044\041\030\072" +
    "\022\073\026\074\006\075\007\001\002\000\004\002\237" +
    "\001\002\000\072\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\031\uffc9\035\uffc9\046\uffc9\055\uffc9\056\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\071\uffc9\001\002\000\072\002" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8" +
    "\035\uffc8\046\uffc8\055\uffc8\056\uffc8\060\uffc8\061\uffc8\062" +
    "\uffc8\071\uffc8\001\002\000\010\002\uffe3\031\uffe3\046\uffe3" +
    "\001\002\000\010\002\uffff\031\201\046\uffff\001\002\000" +
    "\030\005\027\007\004\012\014\022\033\037\023\040\044" +
    "\041\030\072\022\073\026\074\006\075\007\001\002\000" +
    "\030\005\027\007\004\012\014\022\033\037\023\040\044" +
    "\041\030\072\022\073\026\074\006\075\007\001\002\000" +
    "\030\005\027\007\004\012\014\022\033\037\023\040\044" +
    "\041\030\072\022\073\026\074\006\075\007\001\002\000" +
    "\006\030\ufffa\031\ufffa\001\002\000\022\042\064\044\065" +
    "\047\072\050\062\051\063\052\070\053\066\072\067\001" +
    "\002\000\062\005\027\007\004\012\014\022\033\032\053" +
    "\033\016\034\041\037\023\040\044\041\030\045\017\046" +
    "\227\054\021\057\037\063\035\064\034\065\013\066\024" +
    "\067\012\070\020\072\022\073\026\074\006\075\007\001" +
    "\002\000\004\072\217\001\002\000\030\005\027\007\004" +
    "\012\014\022\033\037\023\040\044\041\030\072\022\073" +
    "\026\074\006\075\007\001\002\000\072\002\uffc7\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\035\uffc7\046" +
    "\uffc7\055\uffc7\056\uffc7\060\uffc7\061\uffc7\062\uffc7\071\uffc7" +
    "\001\002\000\072\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\031\uffcc\035\uffcc\046\uffcc\055\uffcc\056\uffcc" +
    "\060\uffcc\061\uffcc\062\uffcc\071\uffcc\001\002\000\030\005" +
    "\027\007\004\012\014\022\033\037\023\040\044\041\030" +
    "\072\022\073\026\074\006\075\007\001\002\000\006\030" +
    "\ufffb\031\ufffb\001\002\000\072\002\uffca\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\013\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\031\uffca\035\uffca\046\uffca\055" +
    "\uffca\056\uffca\060\uffca\061\uffca\062\uffca\071\uffca\001\002" +
    "\000\024\007\004\022\033\037\023\040\044\041\030\072" +
    "\022\073\026\074\006\075\007\001\002\000\072\002\uffc6" +
    "\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\035" +
    "\uffc6\046\uffc6\055\uffc6\056\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\071\uffc6\001\002\000\006\030\ufffc\031\ufffc\001\002\000" +
    "\006\030\ufffd\031\ufffd\001\002\000\030\005\027\007\004" +
    "\012\014\022\033\037\023\040\044\041\030\072\022\073" +
    "\026\074\006\075\007\001\002\000\016\002\uffda\031\uffda" +
    "\046\uffda\056\uffda\060\uffda\062\uffda\001\002\000\030\005" +
    "\027\007\004\012\014\022\033\037\023\040\044\041\030" +
    "\072\022\073\026\074\006\075\007\001\002\000\006\030" +
    "\175\031\176\001\002\000\030\005\027\007\004\012\014" +
    "\022\033\037\023\040\044\041\030\072\022\073\026\074" +
    "\006\075\007\001\002\000\016\002\uffd8\031\uffd8\046\uffd8" +
    "\056\uffd8\060\uffd8\062\uffd8\001\002\000\004\072\147\001" +
    "\002\000\072\002\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\031\uffa6\035\uffa6\046\uffa6\055\uffa6\056\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\071\uffa6\001\002\000\072\002\uffa7" +
    "\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\013" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\031\uffa7\035" +
    "\uffa7\046\uffa7\055\uffa7\056\uffa7\060\uffa7\061\uffa7\062\uffa7" +
    "\071\uffa7\001\002\000\072\002\uffcb\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\031\uffcb\035\uffcb\046\uffcb\055\uffcb" +
    "\056\uffcb\060\uffcb\061\uffcb\062\uffcb\071\uffcb\001\002\000" +
    "\072\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad" +
    "\031\uffad\035\uffad\046\uffad\055\uffad\056\uffad\060\uffad\061" +
    "\uffad\062\uffad\071\uffad\001\002\000\072\002\uffaf\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf" +
    "\024\140\025\uffaf\026\137\027\136\031\uffaf\035\uffaf\046" +
    "\uffaf\055\uffaf\056\uffaf\060\uffaf\061\uffaf\062\uffaf\071\uffaf" +
    "\001\002\000\004\020\134\001\002\000\064\002\uffb5\004" +
    "\uffb5\005\uffb5\006\130\007\132\010\127\011\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\023" +
    "\uffb5\025\uffb5\031\uffb5\035\uffb5\046\uffb5\055\uffb5\056\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\071\uffb5\001\002\000\056\002" +
    "\uffbd\004\uffbd\005\uffbd\011\uffbd\013\uffbd\014\121\015\122" +
    "\016\123\017\125\020\uffbd\021\117\023\uffbd\025\uffbd\031" +
    "\uffbd\035\uffbd\046\uffbd\055\uffbd\056\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\071\120\001\002\000\042\002\uffc1\004\uffc1\005" +
    "\uffc1\011\113\013\114\020\uffc1\023\uffc1\025\uffc1\031\uffc1" +
    "\035\uffc1\046\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\001\002\000\022\042\064\044\065\047\072\050\062" +
    "\051\063\052\070\053\066\072\067\001\002\000\036\002" +
    "\uffc3\004\uffc3\005\060\020\uffc3\023\uffc3\025\uffc3\031\uffc3" +
    "\035\uffc3\046\uffc3\055\uffc3\056\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\001\002\000\034\002\uffcd\004\056\020\uffcd\023\uffcd" +
    "\025\uffcd\031\uffcd\035\uffcd\046\uffcd\055\uffcd\056\uffcd\060" +
    "\uffcd\061\uffcd\062\uffcd\001\002\000\030\005\027\007\004" +
    "\012\014\022\033\037\023\040\044\041\030\072\022\073" +
    "\026\074\006\075\007\001\002\000\034\002\uffc5\004\uffc5" +
    "\020\uffc5\023\uffc5\025\uffc5\031\uffc5\035\uffc5\046\uffc5\055" +
    "\uffc5\056\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002\000\030" +
    "\005\027\007\004\012\014\022\033\037\023\040\044\041" +
    "\030\072\022\073\026\074\006\075\007\001\002\000\034" +
    "\002\uffc4\004\uffc4\020\uffc4\023\uffc4\025\uffc4\031\uffc4\035" +
    "\uffc4\046\uffc4\055\uffc4\056\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\001\002\000\006\036\uffeb\072\uffeb\001\002\000\006\036" +
    "\uffe9\072\uffe9\001\002\000\004\024\106\001\002\000\004" +
    "\045\076\001\002\000\006\036\uffe8\072\uffe8\001\002\000" +
    "\006\036\uffef\072\uffef\001\002\000\006\036\uffea\072\uffea" +
    "\001\002\000\004\072\075\001\002\000\022\042\064\044" +
    "\065\047\072\050\062\051\063\052\070\053\066\072\067" +
    "\001\002\000\006\036\ufff0\072\ufff0\001\002\000\006\036" +
    "\uffec\072\uffec\001\002\000\006\030\ufff9\031\ufff9\001\002" +
    "\000\022\042\064\044\065\047\072\050\062\051\063\052" +
    "\070\053\066\072\067\001\002\000\006\031\103\046\104" +
    "\001\002\000\004\072\102\001\002\000\006\031\uffe6\046" +
    "\uffe6\001\002\000\006\031\uffe5\046\uffe5\001\002\000\022" +
    "\042\064\044\065\047\072\050\062\051\063\052\070\053" +
    "\066\072\067\001\002\000\006\036\uffed\072\uffed\001\002" +
    "\000\006\031\uffe7\046\uffe7\001\002\000\004\073\107\001" +
    "\002\000\004\025\110\001\002\000\004\043\111\001\002" +
    "\000\022\042\064\044\065\047\072\050\062\051\063\052" +
    "\070\053\066\072\067\001\002\000\006\036\uffee\072\uffee" +
    "\001\002\000\030\005\uffc0\007\uffc0\012\uffc0\022\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0" +
    "\001\002\000\030\005\uffbf\007\uffbf\012\uffbf\022\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf" +
    "\001\002\000\030\005\027\007\004\012\014\022\033\037" +
    "\023\040\044\041\030\072\022\073\026\074\006\075\007" +
    "\001\002\000\036\002\uffc2\004\uffc2\005\uffc2\020\uffc2\023" +
    "\uffc2\025\uffc2\031\uffc2\035\uffc2\046\uffc2\055\uffc2\056\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\001\002\000\030\005\uffb7\007" +
    "\uffb7\012\uffb7\022\uffb7\037\uffb7\040\uffb7\041\uffb7\072\uffb7" +
    "\073\uffb7\074\uffb7\075\uffb7\001\002\000\030\005\uffb8\007" +
    "\uffb8\012\uffb8\022\uffb8\037\uffb8\040\uffb8\041\uffb8\072\uffb8" +
    "\073\uffb8\074\uffb8\075\uffb8\001\002\000\030\005\uffbc\007" +
    "\uffbc\012\uffbc\022\uffbc\037\uffbc\040\uffbc\041\uffbc\072\uffbc" +
    "\073\uffbc\074\uffbc\075\uffbc\001\002\000\030\005\uffbb\007" +
    "\uffbb\012\uffbb\022\uffbb\037\uffbb\040\uffbb\041\uffbb\072\uffbb" +
    "\073\uffbb\074\uffbb\075\uffbb\001\002\000\030\005\uffba\007" +
    "\uffba\012\uffba\022\uffba\037\uffba\040\uffba\041\uffba\072\uffba" +
    "\073\uffba\074\uffba\075\uffba\001\002\000\030\005\027\007" +
    "\004\012\014\022\033\037\023\040\044\041\030\072\022" +
    "\073\026\074\006\075\007\001\002\000\030\005\uffb9\007" +
    "\uffb9\012\uffb9\022\uffb9\037\uffb9\040\uffb9\041\uffb9\072\uffb9" +
    "\073\uffb9\074\uffb9\075\uffb9\001\002\000\042\002\uffbe\004" +
    "\uffbe\005\uffbe\011\uffbe\013\uffbe\020\uffbe\023\uffbe\025\uffbe" +
    "\031\uffbe\035\uffbe\046\uffbe\055\uffbe\056\uffbe\060\uffbe\061" +
    "\uffbe\062\uffbe\001\002\000\030\005\uffb2\007\uffb2\012\uffb2" +
    "\022\uffb2\037\uffb2\040\uffb2\041\uffb2\072\uffb2\073\uffb2\074" +
    "\uffb2\075\uffb2\001\002\000\030\005\uffb4\007\uffb4\012\uffb4" +
    "\022\uffb4\037\uffb4\040\uffb4\041\uffb4\072\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\001\002\000\030\005\027\007\004\012\014" +
    "\022\033\037\023\040\044\041\030\072\022\073\026\074" +
    "\006\075\007\001\002\000\030\005\uffb3\007\uffb3\012\uffb3" +
    "\022\uffb3\037\uffb3\040\uffb3\041\uffb3\072\uffb3\073\uffb3\074" +
    "\uffb3\075\uffb3\001\002\000\056\002\uffb6\004\uffb6\005\uffb6" +
    "\011\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\023\uffb6\025\uffb6\031\uffb6\035\uffb6\046\uffb6" +
    "\055\uffb6\056\uffb6\060\uffb6\061\uffb6\062\uffb6\071\uffb6\001" +
    "\002\000\030\005\027\007\004\012\014\022\033\037\023" +
    "\040\044\041\030\072\022\073\026\074\006\075\007\001" +
    "\002\000\016\002\uffe2\031\uffe2\046\uffe2\056\uffe2\060\uffe2" +
    "\062\uffe2\001\002\000\004\072\146\001\002\000\004\072" +
    "\145\001\002\000\030\005\027\007\004\012\014\022\033" +
    "\037\023\040\044\041\030\072\022\073\026\074\006\075" +
    "\007\001\002\000\072\002\uffae\004\uffae\005\uffae\006\uffae" +
    "\007\uffae\010\uffae\011\uffae\013\uffae\014\uffae\015\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\031\uffae\035\uffae\046\uffae\055\uffae\056" +
    "\uffae\060\uffae\061\uffae\062\uffae\071\uffae\001\002\000\072" +
    "\002\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011" +
    "\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab" +
    "\021\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\031" +
    "\uffab\035\uffab\046\uffab\055\uffab\056\uffab\060\uffab\061\uffab" +
    "\062\uffab\071\uffab\001\002\000\004\025\144\001\002\000" +
    "\072\002\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020" +
    "\uffac\021\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\031\uffac\035\uffac\046\uffac\055\uffac\056\uffac\060\uffac\061" +
    "\uffac\062\uffac\071\uffac\001\002\000\072\002\uffaa\004\uffaa" +
    "\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\031\uffaa\035\uffaa\046" +
    "\uffaa\055\uffaa\056\uffaa\060\uffaa\061\uffaa\062\uffaa\071\uffaa" +
    "\001\002\000\072\002\uffa9\004\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\031\uffa9\035\uffa9\046\uffa9\055\uffa9\056\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\071\uffa9\001\002\000\004\022" +
    "\151\001\002\000\004\045\017\001\002\000\024\023\155" +
    "\042\064\044\065\047\072\050\062\051\063\052\070\053" +
    "\066\072\067\001\002\000\006\023\162\035\161\001\002" +
    "\000\006\023\ufff3\035\ufff3\001\002\000\006\036\156\072" +
    "\157\001\002\000\004\045\ufff5\001\002\000\004\072\160" +
    "\001\002\000\006\023\ufff1\035\ufff1\001\002\000\006\023" +
    "\ufff2\035\ufff2\001\002\000\022\042\064\044\065\047\072" +
    "\050\062\051\063\052\070\053\066\072\067\001\002\000" +
    "\004\045\ufff6\001\002\000\006\023\ufff4\035\ufff4\001\002" +
    "\000\006\030\ufff7\031\ufff7\001\002\000\004\061\166\001" +
    "\002\000\054\005\027\007\004\012\014\022\033\037\023" +
    "\040\044\041\030\045\017\054\021\057\037\062\uffd6\063" +
    "\035\064\034\065\013\066\024\067\012\070\020\072\022" +
    "\073\026\074\006\075\007\001\002\000\012\031\uffd4\056" +
    "\uffd4\060\uffd4\062\uffd4\001\002\000\004\062\174\001\002" +
    "\000\012\031\172\056\uffd7\060\uffd7\062\uffd7\001\002\000" +
    "\052\005\027\007\004\012\014\022\033\037\023\040\044" +
    "\041\030\045\017\054\021\057\037\063\035\064\034\065" +
    "\013\066\024\067\012\070\020\072\022\073\026\074\006" +
    "\075\007\001\002\000\012\031\uffd5\056\uffd5\060\uffd5\062" +
    "\uffd5\001\002\000\016\002\uffdf\031\uffdf\046\uffdf\056\uffdf" +
    "\060\uffdf\062\uffdf\001\002\000\052\005\027\007\004\012" +
    "\014\022\033\037\023\040\044\041\030\045\017\054\021" +
    "\057\037\063\035\064\034\065\013\066\024\067\012\070" +
    "\020\072\022\073\026\074\006\075\007\001\002\000\010" +
    "\032\053\033\016\034\041\001\002\000\006\030\ufffe\031" +
    "\ufffe\001\002\000\010\002\001\031\201\046\001\001\002" +
    "\000\052\005\027\007\004\012\014\022\033\037\023\040" +
    "\044\041\030\045\017\054\021\057\037\063\035\064\034" +
    "\065\013\066\024\067\012\070\020\072\022\073\026\074" +
    "\006\075\007\001\002\000\010\002\uffe4\031\uffe4\046\uffe4" +
    "\001\002\000\016\002\uffde\031\uffde\046\uffde\056\uffde\060" +
    "\uffde\062\uffde\001\002\000\006\004\056\023\205\001\002" +
    "\000\072\002\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027" +
    "\uffa5\031\uffa5\035\uffa5\046\uffa5\055\uffa5\056\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\071\uffa5\001\002\000\072\002\uffb0\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\023" +
    "\uffb0\024\140\025\uffb0\026\137\027\136\031\uffb0\035\uffb0" +
    "\046\uffb0\055\uffb0\056\uffb0\060\uffb0\061\uffb0\062\uffb0\071" +
    "\uffb0\001\002\000\016\002\uffdc\031\uffdc\046\uffdc\056\uffdc" +
    "\060\uffdc\062\uffdc\001\002\000\004\055\211\001\002\000" +
    "\056\005\027\007\004\012\014\022\033\037\023\040\044" +
    "\041\030\045\017\054\021\056\uffd6\057\037\060\uffd6\063" +
    "\035\064\034\065\013\066\024\067\012\070\020\072\022" +
    "\073\026\074\006\075\007\001\002\000\006\056\213\060" +
    "\214\001\002\000\052\005\027\007\004\012\014\022\033" +
    "\037\023\040\044\041\030\045\017\054\021\057\037\063" +
    "\035\064\034\065\013\066\024\067\012\070\020\072\022" +
    "\073\026\074\006\075\007\001\002\000\016\002\uffe0\031" +
    "\uffe0\046\uffe0\056\uffe0\060\uffe0\062\uffe0\001\002\000\006" +
    "\031\172\060\216\001\002\000\016\002\uffe1\031\uffe1\046" +
    "\uffe1\056\uffe1\060\uffe1\062\uffe1\001\002\000\004\022\220" +
    "\001\002\000\032\005\027\007\004\012\014\022\033\023" +
    "\uffd2\037\023\040\044\041\030\072\022\073\026\074\006" +
    "\075\007\001\002\000\004\023\226\001\002\000\006\023" +
    "\uffd3\035\224\001\002\000\006\023\uffd0\035\uffd0\001\002" +
    "\000\030\005\027\007\004\012\014\022\033\037\023\040" +
    "\044\041\030\072\022\073\026\074\006\075\007\001\002" +
    "\000\006\023\uffd1\035\uffd1\001\002\000\016\002\uffd9\031" +
    "\uffd9\046\uffd9\056\uffd9\060\uffd9\062\uffd9\001\002\000\020" +
    "\002\uffce\030\uffce\031\uffce\046\uffce\056\uffce\060\uffce\062" +
    "\uffce\001\002\000\004\046\231\001\002\000\020\002\uffcf" +
    "\030\uffcf\031\uffcf\046\uffcf\056\uffcf\060\uffcf\062\uffcf\001" +
    "\002\000\004\072\233\001\002\000\006\030\ufff8\031\ufff8" +
    "\001\002\000\064\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\023\uffb1\025\uffb1\031\uffb1\035" +
    "\uffb1\046\uffb1\055\uffb1\056\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\071\uffb1\001\002\000\016\002\uffdb\031\uffdb\046\uffdb\056" +
    "\uffdb\060\uffdb\062\uffdb\001\002\000\016\002\uffdd\031\uffdd" +
    "\046\uffdd\056\uffdd\060\uffdd\062\uffdd\001\002\000\004\002" +
    "\000\001\002\000\072\002\uffa8\004\uffa8\005\uffa8\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\013\uffa8\014\uffa8\015\uffa8\016" +
    "\uffa8\017\uffa8\020\uffa8\021\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\031\uffa8\035\uffa8\046\uffa8\055\uffa8\056" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\071\uffa8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\050\002\004\003\035\004\031\005\030\006" +
    "\024\007\014\010\010\013\007\023\037\026\054\027\053" +
    "\030\051\031\050\032\047\033\045\034\044\035\042\037" +
    "\041\040\046\001\001\000\010\034\237\035\042\037\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\026\054" +
    "\027\053\030\051\031\050\032\047\033\045\034\044\035" +
    "\042\037\041\040\235\001\001\000\026\026\054\027\053" +
    "\030\051\031\050\032\047\033\045\034\044\035\042\037" +
    "\041\040\234\001\001\000\014\032\233\033\045\034\044" +
    "\035\042\037\041\001\001\000\002\001\001\000\006\014" +
    "\231\015\072\001\001\000\050\002\227\003\035\004\031" +
    "\005\030\006\024\007\014\010\010\013\007\023\037\026" +
    "\054\027\053\030\051\031\050\032\047\033\045\034\044" +
    "\035\042\037\041\040\046\001\001\000\002\001\001\000" +
    "\026\026\054\027\053\030\051\031\050\032\047\033\045" +
    "\034\044\035\042\037\041\040\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\026\054\027\053\030\051" +
    "\031\050\032\047\033\045\034\044\035\042\037\041\040" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\033\205\034\044\035\042\037\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\026\203" +
    "\027\053\030\051\031\050\032\047\033\045\034\044\035" +
    "\042\037\041\001\001\000\002\001\001\000\026\026\054" +
    "\027\053\030\051\031\050\032\047\033\045\034\044\035" +
    "\042\037\041\040\202\001\001\000\002\001\001\000\026" +
    "\026\054\027\053\030\051\031\050\032\047\033\045\034" +
    "\044\035\042\037\041\040\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\140\041\141" +
    "\001\001\000\002\001\001\000\004\044\130\001\001\000" +
    "\004\043\123\001\001\000\004\042\114\001\001\000\006" +
    "\014\070\015\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\027\056\030\051\031\050\032\047\033\045" +
    "\034\044\035\042\037\041\001\001\000\002\001\001\000" +
    "\022\027\060\030\051\031\050\032\047\033\045\034\044" +
    "\035\042\037\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\073\015\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\077\015\072\021\076\022\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\077\015\072\022\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\111\015\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\027" +
    "\115\030\051\031\050\032\047\033\045\034\044\035\042" +
    "\037\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\030\125\031\050\032\047\033\045\034" +
    "\044\035\042\037\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\032" +
    "\132\033\045\034\044\035\042\037\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\026\054\027\053\030" +
    "\051\031\050\032\047\033\045\034\044\035\042\037\041" +
    "\040\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\026\054\027\053\030\051\031\050" +
    "\032\047\033\045\034\044\035\042\037\041\040\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\147\001\001\000\004\023\163\001\001\000\012" +
    "\014\153\015\072\017\151\020\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\153\015\072\020\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\011\170\012\167\013\166\023\037\026\054\027\053" +
    "\030\051\031\050\032\047\033\045\034\044\035\042\037" +
    "\041\040\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\013\172\023\037\026\054\027" +
    "\053\030\051\031\050\032\047\033\045\034\044\035\042" +
    "\037\041\040\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\010\177\013\007\023\037\026\054\027\053" +
    "\030\051\031\050\032\047\033\045\034\044\035\042\037" +
    "\041\040\046\001\001\000\012\004\176\005\030\006\024" +
    "\007\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\013\201\023\037\026\054\027\053\030\051\031\050" +
    "\032\047\033\045\034\044\035\042\037\041\040\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\140\041\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\011\170\012\211" +
    "\013\166\023\037\026\054\027\053\030\051\031\050\032" +
    "\047\033\045\034\044\035\042\037\041\040\046\001\001" +
    "\000\002\001\001\000\034\011\214\013\166\023\037\026" +
    "\054\027\053\030\051\031\050\032\047\033\045\034\044" +
    "\035\042\037\041\040\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\024\220\025\221\026\054\027\053\030\051\031\050\032" +
    "\047\033\045\034\044\035\042\037\041\040\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\026\054\027\053\030\051\031\050\032\047\033\045" +
    "\034\044\035\042\037\041\040\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {


   private SemOps sem = new SemOps();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= DECLARACIONES DAMP INSTRUCCIONES 
            {
              Programa RESULT =null;
		Declaraciones decs = (Declaraciones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Instrucciones ins = (Instrucciones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.P_decs(decs,ins);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= INSTRUCCIONES 
            {
              Programa RESULT =null;
		Instrucciones ins = (Instrucciones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.P_nodecs(ins);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DECLARACIONES PCOMA DECLARACION 
            {
              Declaraciones RESULT =null;
		Declaraciones decs = (Declaraciones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_muchas(decs, dec);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACION 
            {
              Declaraciones RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_una(dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= DECVAR 
            {
              Declaracion RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = dec;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= DECTIPO 
            {
              Declaracion RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = dec;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= DECPROC 
            {
              Declaracion RESULT =null;
		Declaracion dec = (Declaracion)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = dec;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECVAR ::= VAR TIPO ID 
            {
              Declaracion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decvar(tipo, iden);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECVAR",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECTIPO ::= TYPE TIPO ID 
            {
              Declaracion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dectipo(tipo, iden);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECTIPO",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECPROC ::= PROC ID PFORMALES BLOQUE 
            {
              Declaracion RESULT =null;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ParamForms pforms = (ParamForms)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Bloque bl = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decproc(iden, pforms, bl);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("DECPROC",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PFORMALES ::= PAP LISTA_PFORMALES PCIERRE 
            {
              ParamForms RESULT =null;
		ParamForms pforms = (ParamForms)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = pforms;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PFORMALES",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PFORMALES ::= PAP PCIERRE 
            {
              ParamForms RESULT =null;
		 RESULT = sem.pformales_empty();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PFORMALES",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_PFORMALES ::= LISTA_PFORMALES COMA PFORMAL 
            {
              ParamForms RESULT =null;
		ParamForms pforms = (ParamForms)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		ParamForm pform = (ParamForm)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pformales_muchos(pforms, pform);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTA_PFORMALES",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_PFORMALES ::= PFORMAL 
            {
              ParamForms RESULT =null;
		ParamForm pform = (ParamForm)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pformales_uno(pform);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTA_PFORMALES",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PFORMAL ::= TIPO AMP ID 
            {
              ParamForm RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pformal_ref(t, id);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PFORMAL",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PFORMAL ::= TIPO ID 
            {
              ParamForm RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pformal(t, id);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PFORMAL",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= TIPO_BASICO 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = t;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= ID 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_id(id);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= ARRAY CAP LIT_ENT CCIERRE OF TIPO 
            {
              Tipo RESULT =null;
		StringLocalizado le = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_array(le, t);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= RECORD LLAP LISTA_CAMPOS LLCIERRE 
            {
              Tipo RESULT =null;
		Camps l = (Camps)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.tipo_record(l);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= POINTER TIPO 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_pointer(t);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_BASICO ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.int_cons();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_BASICO ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.real_cons();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_BASICO ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.bool_cons();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_BASICO ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.string_cons();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_CAMPOS ::= LISTA_CAMPOS PCOMA CAMPO 
            {
              Camps RESULT =null;
		Camps lc = (Camps)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Camp c = (Camp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campos_muchos(lc, c);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTA_CAMPOS",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_CAMPOS ::= CAMPO 
            {
              Camps RESULT =null;
		Camp c = (Camp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campo_uno(c);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTA_CAMPOS",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CAMPO ::= TIPO ID 
            {
              Camp RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campo(t, id);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("CAMPO",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCIONES ::= INSTRUCCIONES PCOMA INSTRUCCION 
            {
              Instrucciones RESULT =null;
		Instrucciones ins = (Instrucciones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Instruccion in = (Instruccion)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.insts_muchas(ins, in);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Instrucciones RESULT =null;
		Instruccion in = (Instruccion)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.insts_una(in);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= EXPRESION IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		Exp ex1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp ex2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.asig(ex1,ex2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= IF EXPRESION THEN LISTA_INST_OP ELSE LISTA_INST ENDIF 
            {
              Instruccion RESULT =null;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-5)).value;
		Instrucciones l_ins1 = (Instrucciones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Instrucciones l_ins2 = (Instrucciones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.if_else(ex,l_ins1, l_ins2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCION ::= IF EXPRESION THEN LISTA_INST_OP ENDIF 
            {
              Instruccion RESULT =null;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Instrucciones l_ins = (Instrucciones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.if_inst(ex,l_ins);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION ::= WHILE EXPRESION DO LISTA_INST_OP ENDWHILE 
            {
              Instruccion RESULT =null;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Instrucciones l_ins = (Instrucciones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.while_inst(ex,l_ins);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= READ EXPRESION 
            {
              Instruccion RESULT =null;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.read(ex);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION ::= WRITE EXPRESION 
            {
              Instruccion RESULT =null;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.write(ex);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCION ::= NEW EXPRESION 
            {
              Instruccion RESULT =null;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.new_cons(ex);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCION ::= DELETE EXPRESION 
            {
              Instruccion RESULT =null;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.delete(ex);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= NL 
            {
              Instruccion RESULT =null;
		 RESULT = sem.nl();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= CALL ID PAP LISTA_EXPR_OP PCIERRE 
            {
              Instruccion RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Exps l_ex = (Exps)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.call(id, l_ex);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= BLOQUE 
            {
              Instruccion RESULT =null;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.bloque_inst(b);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA_INST_OP ::= LISTA_INST 
            {
              Instrucciones RESULT =null;
		Instrucciones l_ins = (Instrucciones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = l_ins;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTA_INST_OP",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA_INST_OP ::= 
            {
              Instrucciones RESULT =null;
		 RESULT = sem.lista_inst_empty();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTA_INST_OP",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTA_INST ::= LISTA_INST PCOMA INSTRUCCION 
            {
              Instrucciones RESULT =null;
		Instrucciones ins = (Instrucciones)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Instruccion in = (Instruccion)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.insts_muchas(ins, in);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTA_INST",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTA_INST ::= INSTRUCCION 
            {
              Instrucciones RESULT =null;
		Instruccion in = (Instruccion)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.insts_una(in);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTA_INST",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA_EXPR_OP ::= LISTA_EXPR 
            {
              Exps RESULT =null;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exps;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTA_EXPR_OP",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_EXPR_OP ::= 
            {
              Exps RESULT =null;
		 RESULT = sem.lista_exp_empty();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTA_EXPR_OP",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA_EXPR ::= LISTA_EXPR COMA EXPRESION 
            {
              Exps RESULT =null;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp_muchas(exps, exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTA_EXPR",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_EXPR ::= EXPRESION 
            {
              Exps RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp_una(exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LISTA_EXPR",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE ::= LLAP PROGRAMA LLCIERRE 
            {
              Bloque RESULT =null;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.bloque_prog(p);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE ::= LLAP LLCIERRE 
            {
              Bloque RESULT =null;
		 RESULT = sem.no_bloque();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("BLOQUE",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= E0 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = e;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXPRESION",30, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION_BASICA ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = sem.litTrue();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION_BASICA ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = sem.litFalse();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION_BASICA ::= LIT_ENT 
            {
              Exp RESULT =null;
		StringLocalizado c = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.litEnt(c);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION_BASICA ::= LIT_REAL 
            {
              Exp RESULT =null;
		StringLocalizado c = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.litReal(c);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION_BASICA ::= LIT_CAD 
            {
              Exp RESULT =null;
		StringLocalizado c = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.litCad(c);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION_BASICA ::= ID 
            {
              Exp RESULT =null;
		StringLocalizado c = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.id(c);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION_BASICA ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = sem.litNull();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",29, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E0 ::= E0 MAS E1 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = sem.exp("+",exp1,exp2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E0 ::= E1 MENOS E1 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = sem.exp("-",exp1,exp2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E1 ::= E2 OPBN1 E1 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = sem.exp(op,exp1,exp2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPBN1 ::= AND 
            {
              String RESULT =null;
		RESULT = "and"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBN1",32, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPBN1 ::= OR 
            {
              String RESULT =null;
		RESULT = "or"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBN1",32, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E2 ::= E3 OPBN2 E2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = sem.exp(op,exp1,exp2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPBN2 ::= MENOR 
            {
              String RESULT =null;
		RESULT = "<"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBN2",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPBN2 ::= MAYOR 
            {
              String RESULT =null;
		RESULT = ">"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBN2",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPBN2 ::= MENOR_IGUAL 
            {
              String RESULT =null;
		RESULT = "<="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBN2",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPBN2 ::= MAYOR_IGUAL 
            {
              String RESULT =null;
		RESULT = ">="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBN2",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPBN2 ::= DIGUAL 
            {
              String RESULT =null;
		RESULT = "=="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBN2",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPBN2 ::= DIF 
            {
              String RESULT =null;
		RESULT = "!="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBN2",33, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E3 ::= E4 OPBN3 E4 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = sem.exp(op,exp1,exp2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPBN3 ::= DIV 
            {
              String RESULT =null;
		RESULT = "/"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBN3",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPBN3 ::= POR 
            {
              String RESULT =null;
		RESULT = "*"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBN3",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPBN3 ::= PERCENT 
            {
              String RESULT =null;
		RESULT = "%"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPBN3",34, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E4 ::= NOT E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = sem.exp("not",exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E4 ::= MENOS E5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = sem.exp("-",exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E5 ::= E5 OPUN5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp op = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = sem.exp(exp,op);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPUN5 ::= CAP EXPRESION CCIERRE 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPUN5",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPUN5 ::= OP_ACCESO 
            {
              Exp RESULT =null;
		Exp op = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = op;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPUN5",28, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_ACCESO ::= PUNTO ID 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = sem.punto(id);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP_ACCESO",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP_ACCESO ::= FLECHA ID 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = sem.flecha(id);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP_ACCESO",31, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E6 ::= POR E6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = sem.exp("*",exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E7 ::= EXPRESION_BASICA 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E7 ::= PAP E0 PCIERRE 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",27, RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

