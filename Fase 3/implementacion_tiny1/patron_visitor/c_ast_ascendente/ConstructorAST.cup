package c_ast_ascendente;


import java_cup.runtime.*;
import semops.SemOps;
import asint.TinyASint.Exp;
import asint.TinyASint.Exps;
import asint.TinyASint.Declaracion;
import asint.TinyASint.Declaraciones;
import asint.TinyASint.Instruccion;
import asint.TinyASint.Instrucciones;
import asint.TinyASint.Camps;
import asint.TinyASint.Camp;
import asint.TinyASint.Tipo;
import asint.TinyASint.Bloque;
import asint.TinyASint.ParamForms;
import asint.TinyASint.ParamForm;
import asint.TinyASint.Programa;
import asint.TinyASint.StringLocalizado;
import errors.GestionErroresTiny;


scan with {: return getScanner().next_token(); :};
action code {:
   private SemOps sem = new SemOps();
:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};





terminal 	 MAS, MENOS, DIV, POR, PERCENT, AND, NOT, OR, MENOR, 
			 MAYOR, MENOR_IGUAL, MAYOR_IGUAL, IGUAL, DIF, PAP, PCIERRE, CAP, 
			 CCIERRE, PUNTO, FLECHA, DAMP, PCOMA, VAR, TYPE, 
			 PROC, COMA, AMP, TRUE, FALSE, 
			 NULL, ARRAY, OF, RECORD, LLAP, LLCIERRE, POINTER,
			 INT, BOOL, REAL, STRING, IF, THEN, ELSE, WHILE, ENDIF, DO,
			 ENDWHILE, READ, NL, DELETE, NEW, WRITE, CALL, DIGUAL;
			 
terminal StringLocalizado ID, LIT_ENT, LIT_REAL, LIT_CAD;





non terminal  Programa PROGRAMA;

non terminal  Declaraciones DECLARACIONES;
non terminal  Declaracion DECLARACION, DECVAR, DECTIPO, DECPROC;

non terminal  Instrucciones INSTRUCCIONES, LISTA_INST, LISTA_INST_OP;
non terminal  Instruccion INSTRUCCION;

non terminal  Tipo TIPO, TIPO_BASICO;

non terminal  ParamForms PFORMALES, LISTA_PFORMALES;
non terminal  ParamForm PFORMAL;

non terminal  Camps LISTA_CAMPOS;
non terminal  Camp CAMPO;

non terminal Bloque BLOQUE;

non terminal  Exps LISTA_EXPR_OP, LISTA_EXPR;
non terminal  Exp E0, E1, E2, E3, E4, E5, E6, E7, OPUN5, EXPRESION_BASICA,
			  EXPRESION, OP_ACCESO;
			  
non terminal  String OPBN1, OPBN2, OPBN3;







PROGRAMA ::= DECLARACIONES: decs DAMP INSTRUCCIONES: ins
    {: RESULT = sem.P_decs(decs,ins);:};
PROGRAMA ::= INSTRUCCIONES: ins
    {: RESULT = sem.P_nodecs(ins);:};
    

DECLARACIONES ::= DECLARACIONES: decs PCOMA DECLARACION: dec
    {: RESULT = sem.decs_muchas(decs, dec);:};
DECLARACIONES ::= DECLARACION: dec
    {: RESULT = sem.decs_una(dec); :};
    

DECLARACION ::= DECVAR: dec
    {: RESULT = dec;:};
DECLARACION ::= DECTIPO: dec
    {: RESULT = dec;:};
DECLARACION ::= DECPROC: dec
    {: RESULT = dec;:};

DECVAR ::= VAR TIPO: tipo ID: iden
    {: RESULT = sem.decvar(tipo, iden);:};
DECTIPO ::=  TYPE TIPO: tipo ID: iden
    {: RESULT = sem.dectipo(tipo, iden);:};
DECPROC::=  PROC ID: iden PFORMALES: pforms BLOQUE: bl
    {: RESULT = sem.decproc(iden, pforms, bl);:};


PFORMALES ::=  PAP LISTA_PFORMALES: pforms PCIERRE
    {: RESULT = pforms;:};
PFORMALES ::=  PAP PCIERRE
    {: RESULT = sem.pformales_empty();:};

LISTA_PFORMALES  ::=  LISTA_PFORMALES: pforms COMA PFORMAL: pform
    {: RESULT = sem.pformales_muchos(pforms, pform);:};
LISTA_PFORMALES  ::=  PFORMAL: pform
    {: RESULT = sem.pformales_uno(pform);:};

PFORMAL ::=  TIPO: t AMP ID: id
    {: RESULT = sem.pformal_ref(t, id);:};
PFORMAL ::=  TIPO: t ID: id
    {: RESULT = sem.pformal(t, id);:};

TIPO ::=  TIPO_BASICO: t
    {: RESULT = t;:};
TIPO ::=  ID:iden
    {: RESULT = sem.tipo_id(iden);:};
TIPO ::=  ARRAY CAP LIT_ENT: le CCIERRE OF TIPO: t
    {: RESULT = sem.tipo_array(le, t);:};
TIPO ::=  RECORD LLAP LISTA_CAMPOS: l LLCIERRE
    {: RESULT = sem.tipo_record(l);:};
TIPO ::=  POINTER TIPO: t
    {: RESULT = sem.tipo_pointer(t);:};

TIPO_BASICO ::= INT
    {: RESULT = sem.int_cons();:};
TIPO_BASICO ::= REAL
    {: RESULT = sem.real_cons();:};
TIPO_BASICO ::= BOOL
    {: RESULT = sem.bool_cons();:};
TIPO_BASICO ::= STRING
    {: RESULT = sem.string_cons();:};

LISTA_CAMPOS ::= LISTA_CAMPOS: lc PCOMA CAMPO: c
    {: RESULT = sem.campos_muchos(lc, c);:};
LISTA_CAMPOS ::= CAMPO: c
    {: RESULT = sem.campo_uno(c);:};

CAMPO ::= TIPO: t ID: id
    {: RESULT = sem.campo(t, id);:};

INSTRUCCIONES ::= INSTRUCCIONES: ins PCOMA INSTRUCCION: in
    {: RESULT = sem.insts_muchas(ins, in);:};
INSTRUCCIONES ::= INSTRUCCION: in
    {: RESULT = sem.insts_una(in);:};


INSTRUCCION ::= EXPRESION: ex1 IGUAL EXPRESION: ex2
    {: RESULT = sem.asig(ex1,ex2);:};
INSTRUCCION ::= IF EXPRESION: ex THEN LISTA_INST_OP: l_ins1 ELSE LISTA_INST: l_ins2 ENDIF
    {: RESULT = sem.if_else(ex,l_ins1, l_ins2);:};
INSTRUCCION ::= IF EXPRESION: ex THEN LISTA_INST_OP: l_ins ENDIF
    {: RESULT = sem.if_inst(ex,l_ins);:};
INSTRUCCION ::= WHILE EXPRESION: ex DO LISTA_INST_OP: l_ins ENDWHILE
    {: RESULT = sem.while_inst(ex,l_ins);:};
INSTRUCCION ::= READ EXPRESION: ex
    {: RESULT = sem.read(ex);:};
INSTRUCCION ::= WRITE EXPRESION: ex
    {: RESULT = sem.write(ex);:};
INSTRUCCION ::= NEW EXPRESION: ex
    {: RESULT = sem.new_cons(ex);:};
INSTRUCCION ::= DELETE EXPRESION: ex
    {: RESULT = sem.delete(ex);:};
INSTRUCCION ::= NL
    {: RESULT = sem.nl();:};
INSTRUCCION ::= CALL ID: id PAP LISTA_EXPR_OP: l_ex PCIERRE
    {: RESULT = sem.call(id, l_ex);:};
INSTRUCCION ::= BLOQUE: b
    {: RESULT = sem.bloque_inst(b);:};


LISTA_INST_OP ::= LISTA_INST: l_ins
    {: RESULT = l_ins;:};
LISTA_INST_OP ::= 
    {: RESULT = sem.lista_inst_empty();:};

LISTA_INST ::= LISTA_INST: ins PCOMA INSTRUCCION: in
    {: RESULT = sem.insts_muchas(ins, in);:};
LISTA_INST ::= INSTRUCCION: in
    {: RESULT = sem.insts_una(in);:};

LISTA_EXPR_OP ::= LISTA_EXPR: exps
    {: RESULT = exps;:};
LISTA_EXPR_OP ::= 
    {: RESULT = sem.lista_exp_empty();:};

LISTA_EXPR ::= LISTA_EXPR: exps COMA EXPRESION: exp
    {: RESULT = sem.exp_muchas(exps, exp);:};
LISTA_EXPR ::= EXPRESION: exp
    {: RESULT = sem.exp_una(exp);:};

BLOQUE ::= LLAP PROGRAMA: p LLCIERRE
    {: RESULT = sem.bloque_prog(p);:};
BLOQUE ::= LLAP LLCIERRE
    {: RESULT = sem.no_bloque();:};

EXPRESION ::= E0: e
    {: RESULT = e;:};

EXPRESION_BASICA ::= TRUE
    {: RESULT = sem.litTrue();:};
EXPRESION_BASICA ::= FALSE
    {: RESULT = sem.litFalse();:};
EXPRESION_BASICA ::= LIT_ENT: c
    {: RESULT = sem.litEnt(c);:};
EXPRESION_BASICA ::= LIT_REAL: c
    {: RESULT = sem.litReal(c);:};
EXPRESION_BASICA ::= LIT_CAD: c
    {: RESULT = sem.litCad(c);:};
EXPRESION_BASICA ::= ID: c
    {: RESULT = sem.id(c);:};
EXPRESION_BASICA ::= NULL
    {: RESULT = sem.litNull();:};
    

E0 ::= E0: exp1 MAS E1: exp2
    {:RESULT = sem.exp("+",exp1,exp2);:};
E0 ::= E1: exp1 MENOS E1: exp2
    {:RESULT = sem.exp("-",exp1,exp2);:};
E0 ::= E1: exp
    {:RESULT = exp;:};

E1 ::= E2: exp1 OPBN1: op E1: exp2
    {:RESULT = sem.exp(op,exp1,exp2);:};
E1 ::= E2: exp
    {:RESULT = exp;:};

OPBN1 ::= AND
    {:RESULT = "and"; :};
OPBN1 ::= OR
    {:RESULT = "or"; :};

E2 ::= E3: exp1 OPBN2: op E2: exp2
    {:RESULT = sem.exp(op,exp1,exp2);:};
E2 ::= E3: exp
    {:RESULT = exp;:};

OPBN2 ::= MENOR
    {:RESULT = "<"; :};
OPBN2 ::= MAYOR
    {:RESULT = ">"; :};
OPBN2 ::= MENOR_IGUAL
    {:RESULT = "<="; :};
OPBN2 ::= MAYOR_IGUAL
    {:RESULT = ">="; :};
OPBN2 ::= DIGUAL
    {:RESULT = "=="; :};
OPBN2 ::= DIF
    {:RESULT = "!="; :};

E3 ::= E4: exp1 OPBN3: op E4: exp2
    {:RESULT = sem.exp(op,exp1,exp2);:};
E3 ::= E4: exp
    {:RESULT = exp;:};

OPBN3 ::= DIV
    {:RESULT = "/"; :};
OPBN3 ::= POR
    {:RESULT = "*"; :};
OPBN3 ::= PERCENT
    {:RESULT = "%"; :};

E4 ::= NOT E4: exp
    {:RESULT = sem.exp("not",exp);:};
E4 ::= MENOS E5: exp
    {:RESULT = sem.exp("-",exp);:};
E4 ::= E5: exp
    {:RESULT = exp;:};

E5 ::= E5: arg0 CAP EXPRESION: arg1 CCIERRE
	{:RESULT = sem.exp("[]", arg0, arg1, null);:};

E5 ::= E5: arg0 PUNTO ID: arg1
	{:RESULT = sem.exp(".", arg0, null, arg1);:};
	
E5 ::= E5: arg0 FLECHA ID: arg1
	{:RESULT = sem.exp("->", arg0, null, arg1);:};

E5 ::= E6: exp
    {:RESULT = exp;:};

E6 ::= POR E6: exp
    {:RESULT = sem.exp("*",exp);:};
E6 ::= E7: exp
    {:RESULT = exp;:};

E7 ::= EXPRESION_BASICA: exp
    {:RESULT = exp;:};
E7 ::= PAP E0: exp PCIERRE
    {:RESULT = exp;:};




