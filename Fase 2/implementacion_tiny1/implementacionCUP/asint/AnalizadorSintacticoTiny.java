
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 27 16:02:56 CEST 2022
//----------------------------------------------------

package implementacionCUP.asint;

import java_cup.runtime.*;
import implementacionCUP.alex.AnalizadorLexicoTiny;
import implementacionCUP.alex.UnidadLexica;
import implementacionCUP.errors.GestionErroresTiny;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 27 16:02:56 CEST 2022
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\021\005\000\002\002\004\000\002\021" +
    "\003\000\002\023\005\000\002\023\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\026\005\000" +
    "\002\027\005\000\002\030\006\000\002\032\005\000\002" +
    "\032\004\000\002\034\005\000\002\034\003\000\002\036" +
    "\005\000\002\036\004\000\002\031\003\000\002\031\003" +
    "\000\002\031\010\000\002\031\006\000\002\031\004\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\040\005\000\002\040\003\000\002\041" +
    "\004\000\002\022\005\000\002\022\003\000\002\025\005" +
    "\000\002\025\011\000\002\025\007\000\002\025\007\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\003\000\002\025\007\000\002\025" +
    "\003\000\002\042\003\000\002\042\002\000\002\043\005" +
    "\000\002\043\003\000\002\044\003\000\002\044\002\000" +
    "\002\035\005\000\002\035\003\000\002\033\005\000\002" +
    "\033\004\000\002\017\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\002\005\000" +
    "\002\002\005\000\002\002\003\000\002\003\005\000\002" +
    "\003\003\000\002\012\003\000\002\012\003\000\002\004" +
    "\005\000\002\004\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\005\005\000\002\005\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\006" +
    "\004\000\002\006\004\000\002\006\003\000\002\007\004" +
    "\000\002\007\003\000\002\015\005\000\002\015\003\000" +
    "\002\020\004\000\002\020\004\000\002\010\004\000\002" +
    "\010\003\000\002\011\003\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\060\005\027\007\004\012\014\022\033\032" +
    "\053\033\022\034\016\035\041\040\023\041\044\042\026" +
    "\043\006\044\007\045\030\051\017\060\021\063\037\067" +
    "\035\070\034\071\013\072\024\073\012\074\020\001\002" +
    "\000\024\007\004\022\033\033\022\040\023\041\044\042" +
    "\026\043\006\044\007\045\030\001\002\000\004\002\237" +
    "\001\002\000\072\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\031\uffc9\036\uffc9\052\uffc9\061\uffc9\062\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\075\uffc9\001\002\000\072\002" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8" +
    "\036\uffc8\052\uffc8\061\uffc8\062\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\075\uffc8\001\002\000\010\002\uffe3\031\235\052\uffe3" +
    "\001\002\000\006\002\uffff\052\uffff\001\002\000\030\005" +
    "\027\007\004\012\014\022\033\033\022\040\023\041\044" +
    "\042\026\043\006\044\007\045\030\001\002\000\030\005" +
    "\027\007\004\012\014\022\033\033\022\040\023\041\044" +
    "\042\026\043\006\044\007\045\030\001\002\000\030\005" +
    "\027\007\004\012\014\022\033\033\022\040\023\041\044" +
    "\042\026\043\006\044\007\045\030\001\002\000\006\030" +
    "\ufffa\031\ufffa\001\002\000\022\033\103\046\100\050\101" +
    "\053\106\054\076\055\077\056\104\057\102\001\002\000" +
    "\062\005\027\007\004\012\014\022\033\032\053\033\022" +
    "\034\016\035\041\040\023\041\044\042\026\043\006\044" +
    "\007\045\030\051\017\052\225\060\021\063\037\067\035" +
    "\070\034\071\013\072\024\073\012\074\020\001\002\000" +
    "\004\033\215\001\002\000\030\005\027\007\004\012\014" +
    "\022\033\033\022\040\023\041\044\042\026\043\006\044" +
    "\007\045\030\001\002\000\072\002\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\031\uffc7\036\uffc7\052\uffc7\061" +
    "\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7\075\uffc7\001\002" +
    "\000\072\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\031\uffcc\036\uffcc\052\uffcc\061\uffcc\062\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\075\uffcc\001\002\000\030\005\027\007" +
    "\004\012\014\022\033\033\022\040\023\041\044\042\026" +
    "\043\006\044\007\045\030\001\002\000\006\030\ufffb\031" +
    "\ufffb\001\002\000\072\002\uffca\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\013\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\031\uffca\036\uffca\052\uffca\061\uffca\062" +
    "\uffca\064\uffca\065\uffca\066\uffca\075\uffca\001\002\000\024" +
    "\007\004\022\033\033\022\040\023\041\044\042\026\043" +
    "\006\044\007\045\030\001\002\000\072\002\uffc6\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\036\uffc6\052" +
    "\uffc6\061\uffc6\062\uffc6\064\uffc6\065\uffc6\066\uffc6\075\uffc6" +
    "\001\002\000\006\030\ufffc\031\ufffc\001\002\000\006\030" +
    "\ufffd\031\202\001\002\000\030\005\027\007\004\012\014" +
    "\022\033\033\022\040\023\041\044\042\026\043\006\044" +
    "\007\045\030\001\002\000\016\002\uffda\031\uffda\052\uffda" +
    "\062\uffda\064\uffda\066\uffda\001\002\000\030\005\027\007" +
    "\004\012\014\022\033\033\022\040\023\041\044\042\026" +
    "\043\006\044\007\045\030\001\002\000\004\030\175\001" +
    "\002\000\030\005\027\007\004\012\014\022\033\033\022" +
    "\040\023\041\044\042\026\043\006\044\007\045\030\001" +
    "\002\000\016\002\uffd8\031\uffd8\052\uffd8\062\uffd8\064\uffd8" +
    "\066\uffd8\001\002\000\004\033\147\001\002\000\072\002" +
    "\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\031\uffa6" +
    "\036\uffa6\052\uffa6\061\uffa6\062\uffa6\064\uffa6\065\uffa6\066" +
    "\uffa6\075\uffa6\001\002\000\072\002\uffa7\004\uffa7\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\031\uffa7\036\uffa7\052\uffa7\061" +
    "\uffa7\062\uffa7\064\uffa7\065\uffa7\066\uffa7\075\uffa7\001\002" +
    "\000\072\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\031\uffcb\036\uffcb\052\uffcb\061\uffcb\062\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\075\uffcb\001\002\000\072\002\uffad\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\013\uffad" +
    "\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\031\uffad\036\uffad" +
    "\052\uffad\061\uffad\062\uffad\064\uffad\065\uffad\066\uffad\075" +
    "\uffad\001\002\000\072\002\uffaf\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf\024\140\025\uffaf" +
    "\026\137\027\136\031\uffaf\036\uffaf\052\uffaf\061\uffaf\062" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\075\uffaf\001\002\000\004" +
    "\020\134\001\002\000\064\002\uffb5\004\uffb5\005\uffb5\006" +
    "\130\007\132\010\127\011\uffb5\013\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\023\uffb5\025\uffb5\031" +
    "\uffb5\036\uffb5\052\uffb5\061\uffb5\062\uffb5\064\uffb5\065\uffb5" +
    "\066\uffb5\075\uffb5\001\002\000\056\002\uffbd\004\uffbd\005" +
    "\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\023\uffbd\025\uffbd\031\uffbd\036\uffbd\052" +
    "\uffbd\061\uffbd\062\uffbd\064\uffbd\065\uffbd\066\uffbd\075\uffbd" +
    "\001\002\000\056\002\uffc1\004\uffc1\005\uffc1\011\uffc1\013" +
    "\uffc1\014\066\015\067\016\070\017\072\020\uffc1\021\064" +
    "\023\uffc1\025\uffc1\031\uffc1\036\uffc1\052\uffc1\061\uffc1\062" +
    "\uffc1\064\uffc1\065\uffc1\066\uffc1\075\065\001\002\000\022" +
    "\033\103\046\100\050\101\053\106\054\076\055\077\056" +
    "\104\057\102\001\002\000\042\002\uffc3\004\056\005\060" +
    "\011\057\013\061\020\uffc3\023\uffc3\025\uffc3\031\uffc3\036" +
    "\uffc3\052\uffc3\061\uffc3\062\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\001\002\000\032\002\uffcd\020\uffcd\023\uffcd\025\uffcd\031" +
    "\uffcd\036\uffcd\052\uffcd\061\uffcd\062\uffcd\064\uffcd\065\uffcd" +
    "\066\uffcd\001\002\000\030\005\027\007\004\012\014\022" +
    "\033\033\022\040\023\041\044\042\026\043\006\044\007" +
    "\045\030\001\002\000\030\005\uffc0\007\uffc0\012\uffc0\022" +
    "\uffc0\033\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\001\002\000\030\005\027\007\004\012\014\022" +
    "\033\033\022\040\023\041\044\042\026\043\006\044\007" +
    "\045\030\001\002\000\030\005\uffbf\007\uffbf\012\uffbf\022" +
    "\uffbf\033\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\001\002\000\030\005\027\007\004\012\014\022" +
    "\033\033\022\040\023\041\044\042\026\043\006\044\007" +
    "\045\030\001\002\000\056\002\uffc2\004\uffc2\005\uffc2\011" +
    "\uffc2\013\uffc2\014\066\015\067\016\070\017\072\020\uffc2" +
    "\021\064\023\uffc2\025\uffc2\031\uffc2\036\uffc2\052\uffc2\061" +
    "\uffc2\062\uffc2\064\uffc2\065\uffc2\066\uffc2\075\065\001\002" +
    "\000\030\005\uffb7\007\uffb7\012\uffb7\022\uffb7\033\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\001\002" +
    "\000\030\005\uffb8\007\uffb8\012\uffb8\022\uffb8\033\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\001\002" +
    "\000\030\005\uffbc\007\uffbc\012\uffbc\022\uffbc\033\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\001\002" +
    "\000\030\005\uffbb\007\uffbb\012\uffbb\022\uffbb\033\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\001\002" +
    "\000\030\005\uffba\007\uffba\012\uffba\022\uffba\033\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\001\002" +
    "\000\030\005\027\007\004\012\014\022\033\033\022\040" +
    "\023\041\044\042\026\043\006\044\007\045\030\001\002" +
    "\000\030\005\uffb9\007\uffb9\012\uffb9\022\uffb9\033\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\001\002" +
    "\000\056\002\uffbe\004\uffbe\005\uffbe\011\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\023\uffbe" +
    "\025\uffbe\031\uffbe\036\uffbe\052\uffbe\061\uffbe\062\uffbe\064" +
    "\uffbe\065\uffbe\066\uffbe\075\uffbe\001\002\000\036\002\uffc4" +
    "\011\057\013\061\020\uffc4\023\uffc4\025\uffc4\031\uffc4\036" +
    "\uffc4\052\uffc4\061\uffc4\062\uffc4\064\uffc4\065\uffc4\066\uffc4" +
    "\001\002\000\032\002\uffc5\020\uffc5\023\uffc5\025\uffc5\031" +
    "\uffc5\036\uffc5\052\uffc5\061\uffc5\062\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\001\002\000\006\033\uffeb\037\uffeb\001\002\000" +
    "\006\033\uffe9\037\uffe9\001\002\000\004\024\122\001\002" +
    "\000\004\051\112\001\002\000\006\033\uffe8\037\uffe8\001" +
    "\002\000\006\033\uffef\037\uffef\001\002\000\006\033\uffea" +
    "\037\uffea\001\002\000\004\033\111\001\002\000\022\033" +
    "\103\046\100\050\101\053\106\054\076\055\077\056\104" +
    "\057\102\001\002\000\006\033\ufff0\037\ufff0\001\002\000" +
    "\006\033\uffec\037\uffec\001\002\000\006\030\ufff9\031\ufff9" +
    "\001\002\000\022\033\103\046\100\050\101\053\106\054" +
    "\076\055\077\056\104\057\102\001\002\000\004\052\121" +
    "\001\002\000\004\033\120\001\002\000\006\031\116\052" +
    "\uffe6\001\002\000\022\033\103\046\100\050\101\053\106" +
    "\054\076\055\077\056\104\057\102\001\002\000\004\052" +
    "\uffe7\001\002\000\006\031\uffe5\052\uffe5\001\002\000\006" +
    "\033\uffed\037\uffed\001\002\000\004\042\123\001\002\000" +
    "\004\025\124\001\002\000\004\047\125\001\002\000\022" +
    "\033\103\046\100\050\101\053\106\054\076\055\077\056" +
    "\104\057\102\001\002\000\006\033\uffee\037\uffee\001\002" +
    "\000\030\005\uffb2\007\uffb2\012\uffb2\022\uffb2\033\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\001\002" +
    "\000\030\005\uffb4\007\uffb4\012\uffb4\022\uffb4\033\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\001\002" +
    "\000\030\005\027\007\004\012\014\022\033\033\022\040" +
    "\023\041\044\042\026\043\006\044\007\045\030\001\002" +
    "\000\030\005\uffb3\007\uffb3\012\uffb3\022\uffb3\033\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\001\002" +
    "\000\056\002\uffb6\004\uffb6\005\uffb6\011\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6" +
    "\025\uffb6\031\uffb6\036\uffb6\052\uffb6\061\uffb6\062\uffb6\064" +
    "\uffb6\065\uffb6\066\uffb6\075\uffb6\001\002\000\030\005\027" +
    "\007\004\012\014\022\033\033\022\040\023\041\044\042" +
    "\026\043\006\044\007\045\030\001\002\000\016\002\uffe2" +
    "\031\uffe2\052\uffe2\062\uffe2\064\uffe2\066\uffe2\001\002\000" +
    "\004\033\146\001\002\000\004\033\145\001\002\000\030" +
    "\005\027\007\004\012\014\022\033\033\022\040\023\041" +
    "\044\042\026\043\006\044\007\045\030\001\002\000\072" +
    "\002\uffae\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\031" +
    "\uffae\036\uffae\052\uffae\061\uffae\062\uffae\064\uffae\065\uffae" +
    "\066\uffae\075\uffae\001\002\000\072\002\uffab\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\011\uffab\013\uffab\014\uffab" +
    "\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\027\uffab\031\uffab\036\uffab\052\uffab" +
    "\061\uffab\062\uffab\064\uffab\065\uffab\066\uffab\075\uffab\001" +
    "\002\000\004\025\144\001\002\000\072\002\uffac\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\013\uffac\014" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\031\uffac\036\uffac\052" +
    "\uffac\061\uffac\062\uffac\064\uffac\065\uffac\066\uffac\075\uffac" +
    "\001\002\000\072\002\uffaa\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\031\uffaa\036\uffaa\052\uffaa\061\uffaa\062\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\075\uffaa\001\002\000\072\002" +
    "\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\031\uffa9" +
    "\036\uffa9\052\uffa9\061\uffa9\062\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\075\uffa9\001\002\000\004\022\151\001\002\000\004" +
    "\051\017\001\002\000\024\023\155\033\103\046\100\050" +
    "\101\053\106\054\076\055\077\056\104\057\102\001\002" +
    "\000\004\023\163\001\002\000\006\023\ufff3\036\161\001" +
    "\002\000\006\033\157\037\156\001\002\000\004\051\ufff5" +
    "\001\002\000\004\033\160\001\002\000\006\023\ufff1\036" +
    "\ufff1\001\002\000\006\023\ufff2\036\ufff2\001\002\000\022" +
    "\033\103\046\100\050\101\053\106\054\076\055\077\056" +
    "\104\057\102\001\002\000\004\023\ufff4\001\002\000\004" +
    "\051\ufff6\001\002\000\006\030\ufff7\031\ufff7\001\002\000" +
    "\004\065\166\001\002\000\054\005\027\007\004\012\014" +
    "\022\033\033\022\040\023\041\044\042\026\043\006\044" +
    "\007\045\030\051\017\060\021\063\037\066\uffd6\067\035" +
    "\070\034\071\013\072\024\073\012\074\020\001\002\000" +
    "\012\031\173\062\uffd4\064\uffd4\066\uffd4\001\002\000\004" +
    "\066\172\001\002\000\010\062\uffd7\064\uffd7\066\uffd7\001" +
    "\002\000\016\002\uffdf\031\uffdf\052\uffdf\062\uffdf\064\uffdf" +
    "\066\uffdf\001\002\000\052\005\027\007\004\012\014\022" +
    "\033\033\022\040\023\041\044\042\026\043\006\044\007" +
    "\045\030\051\017\060\021\063\037\067\035\070\034\071" +
    "\013\072\024\073\012\074\020\001\002\000\010\062\uffd5" +
    "\064\uffd5\066\uffd5\001\002\000\052\005\027\007\004\012" +
    "\014\022\033\033\022\040\023\041\044\042\026\043\006" +
    "\044\007\045\030\051\017\060\021\063\037\067\035\070" +
    "\034\071\013\072\024\073\012\074\020\001\002\000\006" +
    "\002\001\052\001\001\002\000\016\002\uffde\031\uffde\052" +
    "\uffde\062\uffde\064\uffde\066\uffde\001\002\000\004\023\201" +
    "\001\002\000\072\002\uffa5\004\uffa5\005\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\011\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\023\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\031\uffa5\036\uffa5\052\uffa5\061\uffa5\062\uffa5" +
    "\064\uffa5\065\uffa5\066\uffa5\075\uffa5\001\002\000\010\032" +
    "\053\034\016\035\041\001\002\000\004\030\ufffe\001\002" +
    "\000\072\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\023\uffb0\024\140\025\uffb0\026\137\027" +
    "\136\031\uffb0\036\uffb0\052\uffb0\061\uffb0\062\uffb0\064\uffb0" +
    "\065\uffb0\066\uffb0\075\uffb0\001\002\000\016\002\uffdc\031" +
    "\uffdc\052\uffdc\062\uffdc\064\uffdc\066\uffdc\001\002\000\004" +
    "\061\207\001\002\000\056\005\027\007\004\012\014\022" +
    "\033\033\022\040\023\041\044\042\026\043\006\044\007" +
    "\045\030\051\017\060\021\062\uffd6\063\037\064\uffd6\067" +
    "\035\070\034\071\013\072\024\073\012\074\020\001\002" +
    "\000\006\062\211\064\212\001\002\000\052\005\027\007" +
    "\004\012\014\022\033\033\022\040\023\041\044\042\026" +
    "\043\006\044\007\045\030\051\017\060\021\063\037\067" +
    "\035\070\034\071\013\072\024\073\012\074\020\001\002" +
    "\000\016\002\uffe0\031\uffe0\052\uffe0\062\uffe0\064\uffe0\066" +
    "\uffe0\001\002\000\004\064\214\001\002\000\016\002\uffe1" +
    "\031\uffe1\052\uffe1\062\uffe1\064\uffe1\066\uffe1\001\002\000" +
    "\004\022\216\001\002\000\032\005\027\007\004\012\014" +
    "\022\033\023\uffd2\033\022\040\023\041\044\042\026\043" +
    "\006\044\007\045\030\001\002\000\004\023\224\001\002" +
    "\000\004\023\uffd3\001\002\000\006\023\uffd0\036\222\001" +
    "\002\000\030\005\027\007\004\012\014\022\033\033\022" +
    "\040\023\041\044\042\026\043\006\044\007\045\030\001" +
    "\002\000\004\023\uffd1\001\002\000\016\002\uffd9\031\uffd9" +
    "\052\uffd9\062\uffd9\064\uffd9\066\uffd9\001\002\000\020\002" +
    "\uffce\030\uffce\031\uffce\052\uffce\062\uffce\064\uffce\066\uffce" +
    "\001\002\000\004\052\227\001\002\000\020\002\uffcf\030" +
    "\uffcf\031\uffcf\052\uffcf\062\uffcf\064\uffcf\066\uffcf\001\002" +
    "\000\004\033\231\001\002\000\006\030\ufff8\031\ufff8\001" +
    "\002\000\064\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\023\uffb1\025\uffb1\031\uffb1\036\uffb1" +
    "\052\uffb1\061\uffb1\062\uffb1\064\uffb1\065\uffb1\066\uffb1\075" +
    "\uffb1\001\002\000\016\002\uffdb\031\uffdb\052\uffdb\062\uffdb" +
    "\064\uffdb\066\uffdb\001\002\000\016\002\uffdd\031\uffdd\052" +
    "\uffdd\062\uffdd\064\uffdd\066\uffdd\001\002\000\052\005\027" +
    "\007\004\012\014\022\033\033\022\040\023\041\044\042" +
    "\026\043\006\044\007\045\030\051\017\060\021\063\037" +
    "\067\035\070\034\071\013\072\024\073\012\074\020\001" +
    "\002\000\006\002\uffe4\052\uffe4\001\002\000\004\002\000" +
    "\001\002\000\072\002\uffa8\004\uffa8\005\uffa8\006\uffa8\007" +
    "\uffa8\010\uffa8\011\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\031\uffa8\036\uffa8\052\uffa8\061\uffa8\062\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\075\uffa8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\050\002\054\003\053\004\051\005\050\006" +
    "\047\007\045\010\044\011\042\016\041\017\046\021\004" +
    "\022\010\023\035\024\031\025\007\026\030\027\024\030" +
    "\014\033\037\001\001\000\010\010\237\011\042\016\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\054" +
    "\003\053\004\051\005\050\006\047\007\045\010\044\011" +
    "\042\016\041\017\233\001\001\000\026\002\054\003\053" +
    "\004\051\005\050\006\047\007\045\010\044\011\042\016" +
    "\041\017\232\001\001\000\014\006\231\007\045\010\044" +
    "\011\042\016\041\001\001\000\002\001\001\000\006\031" +
    "\227\037\106\001\001\000\050\002\054\003\053\004\051" +
    "\005\050\006\047\007\045\010\044\011\042\016\041\017" +
    "\046\021\225\022\010\023\035\024\031\025\007\026\030" +
    "\027\024\030\014\033\037\001\001\000\002\001\001\000" +
    "\026\002\054\003\053\004\051\005\050\006\047\007\045" +
    "\010\044\011\042\016\041\017\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\054\003\053\004\051" +
    "\005\050\006\047\007\045\010\044\011\042\016\041\017" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\203\010\044\011\042\016\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\177" +
    "\003\053\004\051\005\050\006\047\007\045\010\044\011" +
    "\042\016\041\001\001\000\002\001\001\000\026\002\054" +
    "\003\053\004\051\005\050\006\047\007\045\010\044\011" +
    "\042\016\041\017\176\001\001\000\002\001\001\000\026" +
    "\002\054\003\053\004\051\005\050\006\047\007\045\010" +
    "\044\011\042\016\041\017\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\140\020\141" +
    "\001\001\000\002\001\001\000\004\014\130\001\001\000" +
    "\002\001\001\000\004\013\070\001\001\000\006\031\104" +
    "\037\106\001\001\000\004\012\061\001\001\000\002\001" +
    "\001\000\024\002\074\003\053\004\051\005\050\006\047" +
    "\007\045\010\044\011\042\016\041\001\001\000\002\001" +
    "\001\000\022\003\073\004\051\005\050\006\047\007\045" +
    "\010\044\011\042\016\041\001\001\000\002\001\001\000" +
    "\020\004\062\005\050\006\047\007\045\010\044\011\042" +
    "\016\041\001\001\000\004\013\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\072\006\047\007\045\010" +
    "\044\011\042\016\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\107\037\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\031\113\037\106\040\112\041\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\113\037\106\040\116\041\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\125\037\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\132\007\045\010\044\011\042\016\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\054\003\053\004\051\005\050\006\047\007\045\010\044" +
    "\011\042\016\041\017\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\054\003\053" +
    "\004\051\005\050\006\047\007\045\010\044\011\042\016" +
    "\041\017\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\147\001\001\000\004\033\163" +
    "\001\001\000\012\031\153\034\151\036\152\037\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\153\034\161\036\152\037\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\002\054\003\053\004\051" +
    "\005\050\006\047\007\045\010\044\011\042\016\041\017" +
    "\046\025\166\033\037\042\167\043\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\054\003\053\004\051\005\050\006\047" +
    "\007\045\010\044\011\042\016\041\017\046\025\166\033" +
    "\037\043\173\001\001\000\002\001\001\000\034\002\054" +
    "\003\053\004\051\005\050\006\047\007\045\010\044\011" +
    "\042\016\041\017\046\022\175\025\007\033\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\023\202\024\031\026\030\027\024" +
    "\030\014\001\001\000\002\001\001\000\006\015\140\020" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\002\054\003\053\004\051\005\050\006\047\007\045\010" +
    "\044\011\042\016\041\017\046\025\166\033\037\042\207" +
    "\043\170\001\001\000\002\001\001\000\034\002\054\003" +
    "\053\004\051\005\050\006\047\007\045\010\044\011\042" +
    "\016\041\017\046\025\166\033\037\043\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\054\003\053\004\051\005\050\006" +
    "\047\007\045\010\044\011\042\016\041\017\220\035\217" +
    "\044\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\054\003\053\004\051\005\050" +
    "\006\047\007\045\010\044\011\042\016\041\017\220\035" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\054\003\053\004\051\005" +
    "\050\006\047\007\045\010\044\011\042\016\041\017\046" +
    "\022\235\025\007\033\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= DECLARACIONES DAMP INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PROGRAMA",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PROGRAMA",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DECLARACION PCOMA DECLARACIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= DECVAR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARACION",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= DECTIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARACION",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= DECPROC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECLARACION",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECVAR ::= VAR TIPO ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECVAR",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECTIPO ::= TYPE TIPO ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECTIPO",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECPROC ::= PROC ID PFORMALES BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DECPROC",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PFORMALES ::= PAP LISTA_PFORMALES PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PFORMALES",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PFORMALES ::= PAP PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PFORMALES",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_PFORMALES ::= PFORMAL COMA LISTA_PFORMALES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_PFORMALES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_PFORMALES ::= PFORMAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_PFORMALES",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PFORMAL ::= TIPO AMP ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PFORMAL",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PFORMAL ::= TIPO ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PFORMAL",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= TIPO_BASICO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= ARRAY CAP LIT_ENT CCIERRE OF TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= RECORD LLAP LISTA_CAMPOS LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= POINTER TIPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_BASICO ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_BASICO ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_BASICO ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_BASICO ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_BASICO",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_CAMPOS ::= CAMPO PCOMA LISTA_CAMPOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_CAMPOS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_CAMPOS ::= CAMPO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_CAMPOS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CAMPO ::= TIPO ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPO",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCIONES ::= INSTRUCCION PCOMA INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= EXPRESION IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= IF EXPRESION THEN LISTA_INST_OP ELSE LISTA_INST ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCION ::= IF EXPRESION THEN LISTA_INST_OP ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION ::= WHILE EXPRESION DO LISTA_INST_OP ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= READ EXPRESION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION ::= WRITE EXPRESION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCION ::= NEW EXPRESION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCION ::= DELETE EXPRESION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= CALL ID PAP LISTA_EXPR_OP PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA_INST_OP ::= LISTA_INST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_INST_OP",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA_INST_OP ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_INST_OP",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTA_INST ::= INSTRUCCION PCOMA LISTA_INST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_INST",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTA_INST ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_INST",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA_EXPR_OP ::= LISTA_EXPR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_EXPR_OP",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA_EXPR_OP ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_EXPR_OP",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA_EXPR ::= EXPRESION COMA LISTA_EXPR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_EXPR",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_EXPR ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_EXPR",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE ::= LLAP PROGRAMA LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOQUE ::= LLAP LLCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQUE",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION_BASICA ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION_BASICA ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION_BASICA ::= LIT_ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION_BASICA ::= LIT_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION_BASICA ::= LIT_CAD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION_BASICA ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION_BASICA ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPRESION_BASICA",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E0 ::= E1 MAS E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E0 ::= E1 MENOS E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E1 ::= E1 OPBN1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPBN1 ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBN1",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPBN1 ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBN1",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E2 ::= E2 OPBN2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPBN2 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBN2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPBN2 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBN2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPBN2 ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBN2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPBN2 ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBN2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPBN2 ::= DIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBN2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPBN2 ::= DIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBN2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E3 ::= E4 OPBN3 E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPBN3 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBN3",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPBN3 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBN3",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPBN3 ::= PERCENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPBN3",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E4 ::= NOT E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E4 ::= MENOS E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E5 ::= E5 OPUN5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OPUN5 ::= CAP EXPRESION CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPUN5",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OPUN5 ::= OP_ACCESO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPUN5",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP_ACCESO ::= PUNTO ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_ACCESO",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP_ACCESO ::= FLECHA ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP_ACCESO",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E6 ::= POR E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E7 ::= EXPRESION_BASICA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E7 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

