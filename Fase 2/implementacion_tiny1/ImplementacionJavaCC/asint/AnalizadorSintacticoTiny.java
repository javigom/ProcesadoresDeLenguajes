/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTiny.java */
package asint;

public class AnalizadorSintacticoTiny implements AnalizadorSintacticoTinyConstants {

  final public void PROGRAMAp() throws ParseException {
    PROGRAMA();
    jj_consume_token(0);
  }

  final public void PROGRAMA() throws ParseException {
    DECLARACIONES();
    jj_consume_token(45);
    INSTRUCCIONES();
  }

  final public void DECLARACIONES() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROC:
    case VAR:
    case TYPE:
      LISTA_DEC();
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  final public void LISTA_DEC() throws ParseException {
    DECLARACION();
    RLISTA_DEC();
  }

  final public void RLISTA_DEC() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      DECLARACION();
      RLISTA_DEC();
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

  final public void DECLARACION() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      DECVAR();
      break;
    case TYPE:
      DECTIPO();
      break;
    case PROC:
      DECPROC();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DECVAR() throws ParseException {
    jj_consume_token(VAR);
    TIPO();
    jj_consume_token(identificador);
  }

  final public void DECTIPO() throws ParseException {
    jj_consume_token(TYPE);
    TIPO();
    jj_consume_token(identificador);
  }

  final public void DECPROC() throws ParseException {
    jj_consume_token(PROC);
    jj_consume_token(identificador);
    PFORMALES();
    BLOQUE();
  }

  final public void PFORMALES() throws ParseException {
    jj_consume_token(47);
    RPFORMALES();
  }

  final public void RPFORMALES() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case REAL:
    case STRING:
    case BOOL:
    case RECORD:
    case ARRAY:
    case POINTER:
    case identificador:
      LISTA_PFORMALES();
      jj_consume_token(48);
      break;
    case 48:
      jj_consume_token(48);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LISTA_PFORMALES() throws ParseException {
    PFORMAL();
    RLISTA_PFORMALES();
  }

  final public void RLISTA_PFORMALES() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      jj_consume_token(49);
      PFORMAL();
      RLISTA_PFORMALES();
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

  final public void PFORMAL() throws ParseException {
    TIPO();
    RPFORMAL();
  }

  final public void RPFORMAL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 50:
      jj_consume_token(50);
      jj_consume_token(identificador);
      break;
    case identificador:
      jj_consume_token(identificador);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TIPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case REAL:
    case STRING:
    case BOOL:
      TIPO_BASICO();
      break;
    case identificador:
      jj_consume_token(identificador);
      break;
    case ARRAY:
      jj_consume_token(ARRAY);
      jj_consume_token(51);
      jj_consume_token(litEnt);
      jj_consume_token(52);
      jj_consume_token(OF);
      TIPO();
      break;
    case RECORD:
      jj_consume_token(RECORD);
      jj_consume_token(53);
      LISTA_CAMPOS();
      jj_consume_token(54);
      break;
    case POINTER:
      jj_consume_token(POINTER);
      TIPO();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TIPO_BASICO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LISTA_CAMPOS() throws ParseException {
    CAMPO();
    RLISTA_CAMPOS();
  }

  final public void RLISTA_CAMPOS() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      CAMPO();
      RLISTA_CAMPOS();
      break;
    default:
      jj_la1[8] = jj_gen;

    }
  }

  final public void CAMPO() throws ParseException {
    TIPO();
    jj_consume_token(identificador);
  }

  final public void INSTRUCCIONES() throws ParseException {
    INSTRUCCION();
    RINST();
  }

  final public void RINST() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      INSTRUCCION();
      RINST();
      break;
    default:
      jj_la1[9] = jj_gen;

    }
  }

  final public void INSTRUCCION() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case FALSE:
    case TRUE:
    case NULL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
    case 47:
    case 57:
    case 58:
      EXPRESION();
      jj_consume_token(55);
      EXPRESION();
      break;
    case IF:
      jj_consume_token(IF);
      EXPRESION();
      jj_consume_token(THEN);
      LISTA_INST_OP();
      RIFTHEN();
      jj_consume_token(ENDIF);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      EXPRESION();
      jj_consume_token(DO);
      LISTA_INST_OP();
      jj_consume_token(ENDWHILE);
      break;
    case READ:
      jj_consume_token(READ);
      EXPRESION();
      break;
    case WRITE:
      jj_consume_token(WRITE);
      EXPRESION();
      break;
    case NL:
      jj_consume_token(NL);
      break;
    case NEW:
      jj_consume_token(NEW);
      EXPRESION();
      break;
    case DELETE:
      jj_consume_token(DELETE);
      EXPRESION();
      break;
    case CALL:
      jj_consume_token(CALL);
      jj_consume_token(identificador);
      jj_consume_token(47);
      LISTA_EXPR_OP();
      jj_consume_token(48);
      break;
    case 53:
      BLOQUE();
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LISTA_INST_OP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case FALSE:
    case TRUE:
    case NULL:
    case IF:
    case WHILE:
    case CALL:
    case NEW:
    case DELETE:
    case READ:
    case WRITE:
    case NL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
    case 47:
    case 53:
    case 57:
    case 58:
      LISTA_INST();
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

  final public void LISTA_INST() throws ParseException {
    INSTRUCCION();
    RLISTA_INST();
  }

  final public void RLISTA_INST() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
      INSTRUCCION();
      RLISTA_INST();
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  final public void RIFTHEN() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      LISTA_INST();
      break;
    default:
      jj_la1[13] = jj_gen;

    }
  }

  final public void LISTA_EXPR_OP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case FALSE:
    case TRUE:
    case NULL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
    case 47:
    case 57:
    case 58:
      LISTA_EXPR();
      break;
    default:
      jj_la1[14] = jj_gen;

    }
  }

  final public void LISTA_EXPR() throws ParseException {
    EXPRESION();
    RLISTA_EXPR();
  }

  final public void RLISTA_EXPR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
      jj_consume_token(49);
      LISTA_EXPR();
      RLISTA_EXPR();
      break;
    default:
      jj_la1[15] = jj_gen;

    }
  }

  final public void BLOQUE() throws ParseException {
    jj_consume_token(53);
    RBLOQUE();
  }

  final public void RBLOQUE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROC:
    case VAR:
    case TYPE:
    case 45:
      PROGRAMA();
      jj_consume_token(54);
      break;
    case 54:
      jj_consume_token(54);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EXPRESION() throws ParseException {
    E0();
  }

  final public void EXPRESION_BASICA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case identificador:
      jj_consume_token(identificador);
      break;
    case NULL:
      jj_consume_token(NULL);
      break;
    case litEnt:
      jj_consume_token(litEnt);
      break;
    case litReal:
      jj_consume_token(litReal);
      break;
    case litCad:
      jj_consume_token(litCad);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E0() throws ParseException {
    E1();
    RE0();
  }

  final public void RE0() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      jj_consume_token(56);
      E0();
      break;
    case 57:
      jj_consume_token(57);
      E1();
      break;
    default:
      jj_la1[18] = jj_gen;

    }
  }

  final public void E1() throws ParseException {
    E2();
    RE1();
  }

  final public void RE1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
      OPBN1();
      E2();
      RE1();
      break;
    default:
      jj_la1[19] = jj_gen;

    }
  }

  final public void E2() throws ParseException {
    E3();
    RE2();
  }

  final public void RE2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
      OPBN2();
      E3();
      RE2();
      break;
    default:
      jj_la1[20] = jj_gen;

    }
  }

  final public void E3() throws ParseException {
    E4();
    RE3();
  }

  final public void RE3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
    case 65:
    case 66:
      OPBN3();
      E4();
      break;
    default:
      jj_la1[21] = jj_gen;

    }
  }

  final public void E4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      E4();
      break;
    case 57:
      jj_consume_token(57);
      E5();
      break;
    case FALSE:
    case TRUE:
    case NULL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
    case 47:
    case 58:
      E5();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E5() throws ParseException {
    E6();
    RE5();
  }

  final public void RE5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
    case 67:
    case 68:
      OPUN5();
      RE5();
      break;
    default:
      jj_la1[23] = jj_gen;

    }
  }

  final public void E6() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      E6();
      break;
    case FALSE:
    case TRUE:
    case NULL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
    case 47:
      E7();
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void E7() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case NULL:
    case litCad:
    case identificador:
    case litEnt:
    case litReal:
      EXPRESION_BASICA();
      break;
    case 47:
      jj_consume_token(47);
      E0();
      jj_consume_token(48);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPBN1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPBN2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      break;
    case 60:
      jj_consume_token(60);
      break;
    case 61:
      jj_consume_token(61);
      break;
    case 62:
      jj_consume_token(62);
      break;
    case 63:
      jj_consume_token(63);
      break;
    case 64:
      jj_consume_token(64);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPBN3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
      jj_consume_token(58);
      break;
    case 65:
      jj_consume_token(65);
      break;
    case 66:
      jj_consume_token(66);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OPUN5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
      EXPRESION();
      jj_consume_token(52);
      break;
    case 67:
    case 68:
      OP_ACCESO();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OP_ACCESO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
      jj_consume_token(67);
      jj_consume_token(identificador);
      break;
    case 68:
      jj_consume_token(68);
      jj_consume_token(identificador);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  public AnalizadorSintacticoTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x100000,0x0,0x100000,0x60078000,0x0,0x0,0x60078000,0x78000,0x0,0x0,0x12287000,0x12287000,0x0,0x800000,0x87000,0x0,0x100000,0x86000,0x0,0xc00,0x0,0x0,0x87000,0x0,0x86000,0x86000,0xc00,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0xc0,0x4000,0xc0,0x10401,0x20000,0x40400,0x401,0x0,0x4000,0x4000,0x6209e3e,0x6209e3e,0x4000,0x0,0x6009e00,0x20000,0x4020c0,0x1e00,0x3000000,0x0,0xf8000000,0x4000000,0x6009e00,0x80000,0x4009e00,0x9e00,0x0,0xf8000000,0x4000000,0x80000,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x6,0x0,0x18,0x0,0x0,0x0,0x1,0x6,0x18,0x18,};
   }

  public AnalizadorSintacticoTiny(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoTiny(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoTiny(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  public void ReInit(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[69];
    for (int i = 0; i < 69; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

                                       }
